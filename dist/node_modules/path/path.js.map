{"version":3,"sources":["../../../node_modules/path/path.js"],"names":["isWindows","process","platform","util","require","normalizeArray","parts","allowAboveRoot","res","i","length","p","pop","push","trimArray","arr","lastIndex","start","end","slice","splitDeviceRe","splitTailRe","win32","win32SplitPath","filename","result","exec","device","tail","result2","dir","basename","ext","win32StatPath","path","isUnc","isAbsolute","normalizeUNCRoot","replace","resolve","resolvedDevice","resolvedTail","resolvedAbsolute","arguments","cwd","env","substr","toLowerCase","isString","TypeError","split","join","normalize","trailingSlash","test","paths","arg","joined","relative","from","to","lowerFrom","lowerTo","toParts","lowerFromParts","lowerToParts","Math","min","samePartsLength","outputParts","concat","_makeLong","resolvedPath","substring","dirname","root","f","extname","format","pathObject","isObject","base","sep","parse","pathString","allParts","name","delimiter","splitPathRe","posix","posixSplitPath","charAt","segment","fromParts","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAGA,IAAIA,YAAYC,QAAQC,QAAR,KAAqB,OAArC;AACA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;;AAGA;AACA;AACA;AACA;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,cAA/B,EAA+C;AAC7C,MAAIC,MAAM,EAAV;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAIE,IAAIL,MAAMG,CAAN,CAAR;;AAEA;AACA,QAAI,CAACE,CAAD,IAAMA,MAAM,GAAhB,EACE;;AAEF,QAAIA,MAAM,IAAV,EAAgB;AACd,UAAIH,IAAIE,MAAJ,IAAcF,IAAIA,IAAIE,MAAJ,GAAa,CAAjB,MAAwB,IAA1C,EAAgD;AAC9CF,YAAII,GAAJ;AACD,OAFD,MAEO,IAAIL,cAAJ,EAAoB;AACzBC,YAAIK,IAAJ,CAAS,IAAT;AACD;AACF,KAND,MAMO;AACLL,UAAIK,IAAJ,CAASF,CAAT;AACD;AACF;;AAED,SAAOH,GAAP;AACD;;AAED;AACA;AACA,SAASM,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAIC,YAAYD,IAAIL,MAAJ,GAAa,CAA7B;AACA,MAAIO,QAAQ,CAAZ;AACA,SAAOA,SAASD,SAAhB,EAA2BC,OAA3B,EAAoC;AAClC,QAAIF,IAAIE,KAAJ,CAAJ,EACE;AACH;;AAED,MAAIC,MAAMF,SAAV;AACA,SAAOE,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;AACtB,QAAIH,IAAIG,GAAJ,CAAJ,EACE;AACH;;AAED,MAAID,UAAU,CAAV,IAAeC,QAAQF,SAA3B,EACE,OAAOD,GAAP;AACF,MAAIE,QAAQC,GAAZ,EACE,OAAO,EAAP;AACF,SAAOH,IAAII,KAAJ,CAAUF,KAAV,EAAiBC,MAAM,CAAvB,CAAP;AACD;;AAED;AACA;AACA,IAAIE,gBACA,oEADJ;;AAGA;AACA,IAAIC,cACA,+DADJ;;AAGA,IAAIC,QAAQ,EAAZ;;AAEA;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC;AACA,MAAIC,SAASL,cAAcM,IAAd,CAAmBF,QAAnB,CAAb;AAAA,MACIG,SAAS,CAACF,OAAO,CAAP,KAAa,EAAd,KAAqBA,OAAO,CAAP,KAAa,EAAlC,CADb;AAAA,MAEIG,OAAOH,OAAO,CAAP,KAAa,EAFxB;AAGA;AACA,MAAII,UAAUR,YAAYK,IAAZ,CAAiBE,IAAjB,CAAd;AAAA,MACIE,MAAMD,QAAQ,CAAR,CADV;AAAA,MAEIE,WAAWF,QAAQ,CAAR,CAFf;AAAA,MAGIG,MAAMH,QAAQ,CAAR,CAHV;AAIA,SAAO,CAACF,MAAD,EAASG,GAAT,EAAcC,QAAd,EAAwBC,GAAxB,CAAP;AACD;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIT,SAASL,cAAcM,IAAd,CAAmBQ,IAAnB,CAAb;AAAA,MACIP,SAASF,OAAO,CAAP,KAAa,EAD1B;AAAA,MAEIU,QAAQ,CAAC,CAACR,MAAF,IAAYA,OAAO,CAAP,MAAc,GAFtC;AAGA,SAAO;AACLA,YAAQA,MADH;AAELQ,WAAOA,KAFF;AAGLC,gBAAYD,SAAS,CAAC,CAACV,OAAO,CAAP,CAHlB,EAG6B;AAClCG,UAAMH,OAAO,CAAP;AAJD,GAAP;AAMD;;AAED,SAASY,gBAAT,CAA0BV,MAA1B,EAAkC;AAChC,SAAO,SAASA,OAAOW,OAAP,CAAe,UAAf,EAA2B,EAA3B,EAA+BA,OAA/B,CAAuC,UAAvC,EAAmD,IAAnD,CAAhB;AACD;;AAED;AACAhB,MAAMiB,OAAN,GAAgB,YAAW;AACzB,MAAIC,iBAAiB,EAArB;AAAA,MACIC,eAAe,EADnB;AAAA,MAEIC,mBAAmB,KAFvB;;AAIA,OAAK,IAAIjC,IAAIkC,UAAUjC,MAAV,GAAmB,CAAhC,EAAmCD,KAAK,CAAC,CAAzC,EAA4CA,GAA5C,EAAiD;AAC/C,QAAIyB,IAAJ;AACA,QAAIzB,KAAK,CAAT,EAAY;AACVyB,aAAOS,UAAUlC,CAAV,CAAP;AACD,KAFD,MAEO,IAAI,CAAC+B,cAAL,EAAqB;AAC1BN,aAAOjC,QAAQ2C,GAAR,EAAP;AACD,KAFM,MAEA;AACL;AACA;AACA;AACA;AACAV,aAAOjC,QAAQ4C,GAAR,CAAY,MAAML,cAAlB,CAAP;AACA;AACA;AACA,UAAI,CAACN,IAAD,IAASA,KAAKY,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkBC,WAAlB,OACTP,eAAeO,WAAf,KAA+B,IADnC,EACyC;AACvCb,eAAOM,iBAAiB,IAAxB;AACD;AACF;;AAED;AACA,QAAI,CAACrC,KAAK6C,QAAL,CAAcd,IAAd,CAAL,EAA0B;AACxB,YAAM,IAAIe,SAAJ,CAAc,2CAAd,CAAN;AACD,KAFD,MAEO,IAAI,CAACf,IAAL,EAAW;AAChB;AACD;;AAED,QAAIT,SAASQ,cAAcC,IAAd,CAAb;AAAA,QACIP,SAASF,OAAOE,MADpB;AAAA,QAEIQ,QAAQV,OAAOU,KAFnB;AAAA,QAGIC,aAAaX,OAAOW,UAHxB;AAAA,QAIIR,OAAOH,OAAOG,IAJlB;;AAMA,QAAID,UACAa,cADA,IAEAb,OAAOoB,WAAP,OAAyBP,eAAeO,WAAf,EAF7B,EAE2D;AACzD;AACA;AACD;;AAED,QAAI,CAACP,cAAL,EAAqB;AACnBA,uBAAiBb,MAAjB;AACD;AACD,QAAI,CAACe,gBAAL,EAAuB;AACrBD,qBAAeb,OAAO,IAAP,GAAca,YAA7B;AACAC,yBAAmBN,UAAnB;AACD;;AAED,QAAII,kBAAkBE,gBAAtB,EAAwC;AACtC;AACD;AACF;;AAED;AACA;AACA,MAAIP,KAAJ,EAAW;AACTK,qBAAiBH,iBAAiBG,cAAjB,CAAjB;AACD;;AAED;AACA;AACA;;AAEA;AACAC,iBAAepC,eAAeoC,aAAaS,KAAb,CAAmB,SAAnB,CAAf,EACe,CAACR,gBADhB,EACkCS,IADlC,CACuC,IADvC,CAAf;;AAGA,SAAQX,kBAAkBE,mBAAmB,IAAnB,GAA0B,EAA5C,IAAkDD,YAAnD,IACA,GADP;AAED,CA1ED;;AA6EAnB,MAAM8B,SAAN,GAAkB,UAASlB,IAAT,EAAe;AAC/B,MAAIT,SAASQ,cAAcC,IAAd,CAAb;AAAA,MACIP,SAASF,OAAOE,MADpB;AAAA,MAEIQ,QAAQV,OAAOU,KAFnB;AAAA,MAGIC,aAAaX,OAAOW,UAHxB;AAAA,MAIIR,OAAOH,OAAOG,IAJlB;AAAA,MAKIyB,gBAAgB,UAAUC,IAAV,CAAe1B,IAAf,CALpB;;AAOA;AACAA,SAAOvB,eAAeuB,KAAKsB,KAAL,CAAW,SAAX,CAAf,EAAsC,CAACd,UAAvC,EAAmDe,IAAnD,CAAwD,IAAxD,CAAP;;AAEA,MAAI,CAACvB,IAAD,IAAS,CAACQ,UAAd,EAA0B;AACxBR,WAAO,GAAP;AACD;AACD,MAAIA,QAAQyB,aAAZ,EAA2B;AACzBzB,YAAQ,IAAR;AACD;;AAED;AACA;AACA,MAAIO,KAAJ,EAAW;AACTR,aAASU,iBAAiBV,MAAjB,CAAT;AACD;;AAED,SAAOA,UAAUS,aAAa,IAAb,GAAoB,EAA9B,IAAoCR,IAA3C;AACD,CAzBD;;AA4BAN,MAAMc,UAAN,GAAmB,UAASF,IAAT,EAAe;AAChC,SAAOD,cAAcC,IAAd,EAAoBE,UAA3B;AACD,CAFD;;AAIAd,MAAM6B,IAAN,GAAa,YAAW;AACtB,MAAII,QAAQ,EAAZ;AACA,OAAK,IAAI9C,IAAI,CAAb,EAAgBA,IAAIkC,UAAUjC,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,QAAI+C,MAAMb,UAAUlC,CAAV,CAAV;AACA,QAAI,CAACN,KAAK6C,QAAL,CAAcQ,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIP,SAAJ,CAAc,wCAAd,CAAN;AACD;AACD,QAAIO,GAAJ,EAAS;AACPD,YAAM1C,IAAN,CAAW2C,GAAX;AACD;AACF;;AAED,MAAIC,SAASF,MAAMJ,IAAN,CAAW,IAAX,CAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAI,CAAC,oBAAoBG,IAApB,CAAyBC,MAAM,CAAN,CAAzB,CAAL,EAAyC;AACvCE,aAASA,OAAOnB,OAAP,CAAe,aAAf,EAA8B,IAA9B,CAAT;AACD;;AAED,SAAOhB,MAAM8B,SAAN,CAAgBK,MAAhB,CAAP;AACD,CAhCD;;AAmCA;AACA;AACA;AACA;AACA;AACAnC,MAAMoC,QAAN,GAAiB,UAASC,IAAT,EAAeC,EAAf,EAAmB;AAClCD,SAAOrC,MAAMiB,OAAN,CAAcoB,IAAd,CAAP;AACAC,OAAKtC,MAAMiB,OAAN,CAAcqB,EAAd,CAAL;;AAEA;AACA,MAAIC,YAAYF,KAAKZ,WAAL,EAAhB;AACA,MAAIe,UAAUF,GAAGb,WAAH,EAAd;;AAEA,MAAIgB,UAAUjD,UAAU8C,GAAGV,KAAH,CAAS,IAAT,CAAV,CAAd;;AAEA,MAAIc,iBAAiBlD,UAAU+C,UAAUX,KAAV,CAAgB,IAAhB,CAAV,CAArB;AACA,MAAIe,eAAenD,UAAUgD,QAAQZ,KAAR,CAAc,IAAd,CAAV,CAAnB;;AAEA,MAAIxC,SAASwD,KAAKC,GAAL,CAASH,eAAetD,MAAxB,EAAgCuD,aAAavD,MAA7C,CAAb;AACA,MAAI0D,kBAAkB1D,MAAtB;AACA,OAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC/B,QAAIuD,eAAevD,CAAf,MAAsBwD,aAAaxD,CAAb,CAA1B,EAA2C;AACzC2D,wBAAkB3D,CAAlB;AACA;AACD;AACF;;AAED,MAAI2D,mBAAmB,CAAvB,EAA0B;AACxB,WAAOR,EAAP;AACD;;AAED,MAAIS,cAAc,EAAlB;AACA,OAAK,IAAI5D,IAAI2D,eAAb,EAA8B3D,IAAIuD,eAAetD,MAAjD,EAAyDD,GAAzD,EAA8D;AAC5D4D,gBAAYxD,IAAZ,CAAiB,IAAjB;AACD;;AAEDwD,gBAAcA,YAAYC,MAAZ,CAAmBP,QAAQ5C,KAAR,CAAciD,eAAd,CAAnB,CAAd;;AAEA,SAAOC,YAAYlB,IAAZ,CAAiB,IAAjB,CAAP;AACD,CAlCD;;AAqCA7B,MAAMiD,SAAN,GAAkB,UAASrC,IAAT,EAAe;AAC/B;AACA,MAAI,CAAC/B,KAAK6C,QAAL,CAAcd,IAAd,CAAL,EACE,OAAOA,IAAP;;AAEF,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAIsC,eAAelD,MAAMiB,OAAN,CAAcL,IAAd,CAAnB;;AAEA,MAAI,gBAAgBoB,IAAhB,CAAqBkB,YAArB,CAAJ,EAAwC;AACtC;AACA;AACA,WAAO,YAAYA,YAAnB;AACD,GAJD,MAIO,IAAI,aAAalB,IAAb,CAAkBkB,YAAlB,CAAJ,EAAqC;AAC1C;AACA;AACA,WAAO,iBAAiBA,aAAaC,SAAb,CAAuB,CAAvB,CAAxB;AACD;;AAED,SAAOvC,IAAP;AACD,CAtBD;;AAyBAZ,MAAMoD,OAAN,GAAgB,UAASxC,IAAT,EAAe;AAC7B,MAAIT,SAASF,eAAeW,IAAf,CAAb;AAAA,MACIyC,OAAOlD,OAAO,CAAP,CADX;AAAA,MAEIK,MAAML,OAAO,CAAP,CAFV;;AAIA,MAAI,CAACkD,IAAD,IAAS,CAAC7C,GAAd,EAAmB;AACjB;AACA,WAAO,GAAP;AACD;;AAED,MAAIA,GAAJ,EAAS;AACP;AACAA,UAAMA,IAAIgB,MAAJ,CAAW,CAAX,EAAchB,IAAIpB,MAAJ,GAAa,CAA3B,CAAN;AACD;;AAED,SAAOiE,OAAO7C,GAAd;AACD,CAhBD;;AAmBAR,MAAMS,QAAN,GAAiB,UAASG,IAAT,EAAeF,GAAf,EAAoB;AACnC,MAAI4C,IAAIrD,eAAeW,IAAf,EAAqB,CAArB,CAAR;AACA;AACA,MAAIF,OAAO4C,EAAE9B,MAAF,CAAS,CAAC,CAAD,GAAKd,IAAItB,MAAlB,MAA8BsB,GAAzC,EAA8C;AAC5C4C,QAAIA,EAAE9B,MAAF,CAAS,CAAT,EAAY8B,EAAElE,MAAF,GAAWsB,IAAItB,MAA3B,CAAJ;AACD;AACD,SAAOkE,CAAP;AACD,CAPD;;AAUAtD,MAAMuD,OAAN,GAAgB,UAAS3C,IAAT,EAAe;AAC7B,SAAOX,eAAeW,IAAf,EAAqB,CAArB,CAAP;AACD,CAFD;;AAKAZ,MAAMwD,MAAN,GAAe,UAASC,UAAT,EAAqB;AAClC,MAAI,CAAC5E,KAAK6E,QAAL,CAAcD,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAI9B,SAAJ,CACF,2DAA0D8B,UAA1D,yCAA0DA,UAA1D,EADE,CAAN;AAGD;;AAED,MAAIJ,OAAOI,WAAWJ,IAAX,IAAmB,EAA9B;;AAEA,MAAI,CAACxE,KAAK6C,QAAL,CAAc2B,IAAd,CAAL,EAA0B;AACxB,UAAM,IAAI1B,SAAJ,CACF,kEACO8B,WAAWJ,IADlB,CADE,CAAN;AAID;;AAED,MAAI7C,MAAMiD,WAAWjD,GAArB;AACA,MAAImD,OAAOF,WAAWE,IAAX,IAAmB,EAA9B;AACA,MAAI,CAACnD,GAAL,EAAU;AACR,WAAOmD,IAAP;AACD;AACD,MAAInD,IAAIA,IAAIpB,MAAJ,GAAa,CAAjB,MAAwBY,MAAM4D,GAAlC,EAAuC;AACrC,WAAOpD,MAAMmD,IAAb;AACD;AACD,SAAOnD,MAAMR,MAAM4D,GAAZ,GAAkBD,IAAzB;AACD,CAzBD;;AA4BA3D,MAAM6D,KAAN,GAAc,UAASC,UAAT,EAAqB;AACjC,MAAI,CAACjF,KAAK6C,QAAL,CAAcoC,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAInC,SAAJ,CACF,0DAAyDmC,UAAzD,yCAAyDA,UAAzD,EADE,CAAN;AAGD;AACD,MAAIC,WAAW9D,eAAe6D,UAAf,CAAf;AACA,MAAI,CAACC,QAAD,IAAaA,SAAS3E,MAAT,KAAoB,CAArC,EAAwC;AACtC,UAAM,IAAIuC,SAAJ,CAAc,mBAAmBmC,UAAnB,GAAgC,GAA9C,CAAN;AACD;AACD,SAAO;AACLT,UAAMU,SAAS,CAAT,CADD;AAELvD,SAAKuD,SAAS,CAAT,IAAcA,SAAS,CAAT,EAAYlE,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAFd;AAGL8D,UAAMI,SAAS,CAAT,CAHD;AAILrD,SAAKqD,SAAS,CAAT,CAJA;AAKLC,UAAMD,SAAS,CAAT,EAAYlE,KAAZ,CAAkB,CAAlB,EAAqBkE,SAAS,CAAT,EAAY3E,MAAZ,GAAqB2E,SAAS,CAAT,EAAY3E,MAAtD;AALD,GAAP;AAOD,CAjBD;;AAoBAY,MAAM4D,GAAN,GAAY,IAAZ;AACA5D,MAAMiE,SAAN,GAAkB,GAAlB;;AAGA;AACA;AACA,IAAIC,cACA,+DADJ;AAEA,IAAIC,QAAQ,EAAZ;;AAGA,SAASC,cAAT,CAAwBlE,QAAxB,EAAkC;AAChC,SAAOgE,YAAY9D,IAAZ,CAAiBF,QAAjB,EAA2BL,KAA3B,CAAiC,CAAjC,CAAP;AACD;;AAGD;AACA;AACAsE,MAAMlD,OAAN,GAAgB,YAAW;AACzB,MAAIiC,eAAe,EAAnB;AAAA,MACI9B,mBAAmB,KADvB;;AAGA,OAAK,IAAIjC,IAAIkC,UAAUjC,MAAV,GAAmB,CAAhC,EAAmCD,KAAK,CAAC,CAAN,IAAW,CAACiC,gBAA/C,EAAiEjC,GAAjE,EAAsE;AACpE,QAAIyB,OAAQzB,KAAK,CAAN,GAAWkC,UAAUlC,CAAV,CAAX,GAA0BR,QAAQ2C,GAAR,EAArC;;AAEA;AACA,QAAI,CAACzC,KAAK6C,QAAL,CAAcd,IAAd,CAAL,EAA0B;AACxB,YAAM,IAAIe,SAAJ,CAAc,2CAAd,CAAN;AACD,KAFD,MAEO,IAAI,CAACf,IAAL,EAAW;AAChB;AACD;;AAEDsC,mBAAetC,OAAO,GAAP,GAAasC,YAA5B;AACA9B,uBAAmBR,KAAK,CAAL,MAAY,GAA/B;AACD;;AAED;AACA;;AAEA;AACAsC,iBAAenE,eAAemE,aAAatB,KAAb,CAAmB,GAAnB,CAAf,EACe,CAACR,gBADhB,EACkCS,IADlC,CACuC,GADvC,CAAf;;AAGA,SAAQ,CAACT,mBAAmB,GAAnB,GAAyB,EAA1B,IAAgC8B,YAAjC,IAAkD,GAAzD;AACD,CA1BD;;AA4BA;AACA;AACAiB,MAAMrC,SAAN,GAAkB,UAASlB,IAAT,EAAe;AAC/B,MAAIE,aAAaqD,MAAMrD,UAAN,CAAiBF,IAAjB,CAAjB;AAAA,MACImB,gBAAgBnB,QAAQA,KAAKA,KAAKxB,MAAL,GAAc,CAAnB,MAA0B,GADtD;;AAGA;AACAwB,SAAO7B,eAAe6B,KAAKgB,KAAL,CAAW,GAAX,CAAf,EAAgC,CAACd,UAAjC,EAA6Ce,IAA7C,CAAkD,GAAlD,CAAP;;AAEA,MAAI,CAACjB,IAAD,IAAS,CAACE,UAAd,EAA0B;AACxBF,WAAO,GAAP;AACD;AACD,MAAIA,QAAQmB,aAAZ,EAA2B;AACzBnB,YAAQ,GAAR;AACD;;AAED,SAAO,CAACE,aAAa,GAAb,GAAmB,EAApB,IAA0BF,IAAjC;AACD,CAfD;;AAiBA;AACAuD,MAAMrD,UAAN,GAAmB,UAASF,IAAT,EAAe;AAChC,SAAOA,KAAKyD,MAAL,CAAY,CAAZ,MAAmB,GAA1B;AACD,CAFD;;AAIA;AACAF,MAAMtC,IAAN,GAAa,YAAW;AACtB,MAAIjB,OAAO,EAAX;AACA,OAAK,IAAIzB,IAAI,CAAb,EAAgBA,IAAIkC,UAAUjC,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,QAAImF,UAAUjD,UAAUlC,CAAV,CAAd;AACA,QAAI,CAACN,KAAK6C,QAAL,CAAc4C,OAAd,CAAL,EAA6B;AAC3B,YAAM,IAAI3C,SAAJ,CAAc,wCAAd,CAAN;AACD;AACD,QAAI2C,OAAJ,EAAa;AACX,UAAI,CAAC1D,IAAL,EAAW;AACTA,gBAAQ0D,OAAR;AACD,OAFD,MAEO;AACL1D,gBAAQ,MAAM0D,OAAd;AACD;AACF;AACF;AACD,SAAOH,MAAMrC,SAAN,CAAgBlB,IAAhB,CAAP;AACD,CAhBD;;AAmBA;AACA;AACAuD,MAAM/B,QAAN,GAAiB,UAASC,IAAT,EAAeC,EAAf,EAAmB;AAClCD,SAAO8B,MAAMlD,OAAN,CAAcoB,IAAd,EAAoBb,MAApB,CAA2B,CAA3B,CAAP;AACAc,OAAK6B,MAAMlD,OAAN,CAAcqB,EAAd,EAAkBd,MAAlB,CAAyB,CAAzB,CAAL;;AAEA,MAAI+C,YAAY/E,UAAU6C,KAAKT,KAAL,CAAW,GAAX,CAAV,CAAhB;AACA,MAAIa,UAAUjD,UAAU8C,GAAGV,KAAH,CAAS,GAAT,CAAV,CAAd;;AAEA,MAAIxC,SAASwD,KAAKC,GAAL,CAAS0B,UAAUnF,MAAnB,EAA2BqD,QAAQrD,MAAnC,CAAb;AACA,MAAI0D,kBAAkB1D,MAAtB;AACA,OAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC/B,QAAIoF,UAAUpF,CAAV,MAAiBsD,QAAQtD,CAAR,CAArB,EAAiC;AAC/B2D,wBAAkB3D,CAAlB;AACA;AACD;AACF;;AAED,MAAI4D,cAAc,EAAlB;AACA,OAAK,IAAI5D,IAAI2D,eAAb,EAA8B3D,IAAIoF,UAAUnF,MAA5C,EAAoDD,GAApD,EAAyD;AACvD4D,gBAAYxD,IAAZ,CAAiB,IAAjB;AACD;;AAEDwD,gBAAcA,YAAYC,MAAZ,CAAmBP,QAAQ5C,KAAR,CAAciD,eAAd,CAAnB,CAAd;;AAEA,SAAOC,YAAYlB,IAAZ,CAAiB,GAAjB,CAAP;AACD,CAxBD;;AA2BAsC,MAAMlB,SAAN,GAAkB,UAASrC,IAAT,EAAe;AAC/B,SAAOA,IAAP;AACD,CAFD;;AAKAuD,MAAMf,OAAN,GAAgB,UAASxC,IAAT,EAAe;AAC7B,MAAIT,SAASiE,eAAexD,IAAf,CAAb;AAAA,MACIyC,OAAOlD,OAAO,CAAP,CADX;AAAA,MAEIK,MAAML,OAAO,CAAP,CAFV;;AAIA,MAAI,CAACkD,IAAD,IAAS,CAAC7C,GAAd,EAAmB;AACjB;AACA,WAAO,GAAP;AACD;;AAED,MAAIA,GAAJ,EAAS;AACP;AACAA,UAAMA,IAAIgB,MAAJ,CAAW,CAAX,EAAchB,IAAIpB,MAAJ,GAAa,CAA3B,CAAN;AACD;;AAED,SAAOiE,OAAO7C,GAAd;AACD,CAhBD;;AAmBA2D,MAAM1D,QAAN,GAAiB,UAASG,IAAT,EAAeF,GAAf,EAAoB;AACnC,MAAI4C,IAAIc,eAAexD,IAAf,EAAqB,CAArB,CAAR;AACA;AACA,MAAIF,OAAO4C,EAAE9B,MAAF,CAAS,CAAC,CAAD,GAAKd,IAAItB,MAAlB,MAA8BsB,GAAzC,EAA8C;AAC5C4C,QAAIA,EAAE9B,MAAF,CAAS,CAAT,EAAY8B,EAAElE,MAAF,GAAWsB,IAAItB,MAA3B,CAAJ;AACD;AACD,SAAOkE,CAAP;AACD,CAPD;;AAUAa,MAAMZ,OAAN,GAAgB,UAAS3C,IAAT,EAAe;AAC7B,SAAOwD,eAAexD,IAAf,EAAqB,CAArB,CAAP;AACD,CAFD;;AAKAuD,MAAMX,MAAN,GAAe,UAASC,UAAT,EAAqB;AAClC,MAAI,CAAC5E,KAAK6E,QAAL,CAAcD,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAI9B,SAAJ,CACF,2DAA0D8B,UAA1D,yCAA0DA,UAA1D,EADE,CAAN;AAGD;;AAED,MAAIJ,OAAOI,WAAWJ,IAAX,IAAmB,EAA9B;;AAEA,MAAI,CAACxE,KAAK6C,QAAL,CAAc2B,IAAd,CAAL,EAA0B;AACxB,UAAM,IAAI1B,SAAJ,CACF,kEACO8B,WAAWJ,IADlB,CADE,CAAN;AAID;;AAED,MAAI7C,MAAMiD,WAAWjD,GAAX,GAAiBiD,WAAWjD,GAAX,GAAiB2D,MAAMP,GAAxC,GAA8C,EAAxD;AACA,MAAID,OAAOF,WAAWE,IAAX,IAAmB,EAA9B;AACA,SAAOnD,MAAMmD,IAAb;AACD,CAnBD;;AAsBAQ,MAAMN,KAAN,GAAc,UAASC,UAAT,EAAqB;AACjC,MAAI,CAACjF,KAAK6C,QAAL,CAAcoC,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAInC,SAAJ,CACF,0DAAyDmC,UAAzD,yCAAyDA,UAAzD,EADE,CAAN;AAGD;AACD,MAAIC,WAAWK,eAAeN,UAAf,CAAf;AACA,MAAI,CAACC,QAAD,IAAaA,SAAS3E,MAAT,KAAoB,CAArC,EAAwC;AACtC,UAAM,IAAIuC,SAAJ,CAAc,mBAAmBmC,UAAnB,GAAgC,GAA9C,CAAN;AACD;AACDC,WAAS,CAAT,IAAcA,SAAS,CAAT,KAAe,EAA7B;AACAA,WAAS,CAAT,IAAcA,SAAS,CAAT,KAAe,EAA7B;AACAA,WAAS,CAAT,IAAcA,SAAS,CAAT,KAAe,EAA7B;;AAEA,SAAO;AACLV,UAAMU,SAAS,CAAT,CADD;AAELvD,SAAKuD,SAAS,CAAT,IAAcA,SAAS,CAAT,EAAYlE,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAFd;AAGL8D,UAAMI,SAAS,CAAT,CAHD;AAILrD,SAAKqD,SAAS,CAAT,CAJA;AAKLC,UAAMD,SAAS,CAAT,EAAYlE,KAAZ,CAAkB,CAAlB,EAAqBkE,SAAS,CAAT,EAAY3E,MAAZ,GAAqB2E,SAAS,CAAT,EAAY3E,MAAtD;AALD,GAAP;AAOD,CArBD;;AAwBA+E,MAAMP,GAAN,GAAY,GAAZ;AACAO,MAAMF,SAAN,GAAkB,GAAlB;;AAGA,IAAIvF,SAAJ,EACE8F,OAAOC,OAAP,GAAiBzE,KAAjB,CADF,KAEK;AACHwE,SAAOC,OAAP,GAAiBN,KAAjB;;AAEFK,OAAOC,OAAP,CAAeN,KAAf,GAAuBA,KAAvB;AACAK,OAAOC,OAAP,CAAezE,KAAf,GAAuBA,KAAvB","file":"path.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n\r\nvar isWindows = process.platform === 'win32';\r\nvar util = require('util');\r\n\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  var res = [];\r\n  for (var i = 0; i < parts.length; i++) {\r\n    var p = parts[i];\r\n\r\n    // ignore empty parts\r\n    if (!p || p === '.')\r\n      continue;\r\n\r\n    if (p === '..') {\r\n      if (res.length && res[res.length - 1] !== '..') {\r\n        res.pop();\r\n      } else if (allowAboveRoot) {\r\n        res.push('..');\r\n      }\r\n    } else {\r\n      res.push(p);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// returns an array with empty elements removed from either end of the input\r\n// array or the original array if no elements need to be removed\r\nfunction trimArray(arr) {\r\n  var lastIndex = arr.length - 1;\r\n  var start = 0;\r\n  for (; start <= lastIndex; start++) {\r\n    if (arr[start])\r\n      break;\r\n  }\r\n\r\n  var end = lastIndex;\r\n  for (; end >= 0; end--) {\r\n    if (arr[end])\r\n      break;\r\n  }\r\n\r\n  if (start === 0 && end === lastIndex)\r\n    return arr;\r\n  if (start > end)\r\n    return [];\r\n  return arr.slice(start, end + 1);\r\n}\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nfunction win32StatPath(path) {\r\n  var result = splitDeviceRe.exec(path),\r\n      device = result[1] || '',\r\n      isUnc = !!device && device[1] !== ':';\r\n  return {\r\n    device: device,\r\n    isUnc: isUnc,\r\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\r\n    tail: result[3]\r\n  };\r\n}\r\n\r\nfunction normalizeUNCRoot(device) {\r\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\r\n}\r\n\r\n// path.resolve([from ...], to)\r\nwin32.resolve = function() {\r\n  var resolvedDevice = '',\r\n      resolvedTail = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1; i--) {\r\n    var path;\r\n    if (i >= 0) {\r\n      path = arguments[i];\r\n    } else if (!resolvedDevice) {\r\n      path = process.cwd();\r\n    } else {\r\n      // Windows has the concept of drive-specific current working\r\n      // directories. If we've resolved a drive letter but not yet an\r\n      // absolute path, get cwd for that drive. We're sure the device is not\r\n      // an unc path at this points, because unc paths are always absolute.\r\n      path = process.env['=' + resolvedDevice];\r\n      // Verify that a drive-local cwd was found and that it actually points\r\n      // to our drive. If not, default to the drive's root.\r\n      if (!path || path.substr(0, 3).toLowerCase() !==\r\n          resolvedDevice.toLowerCase() + '\\\\') {\r\n        path = resolvedDevice + '\\\\';\r\n      }\r\n    }\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    var result = win32StatPath(path),\r\n        device = result.device,\r\n        isUnc = result.isUnc,\r\n        isAbsolute = result.isAbsolute,\r\n        tail = result.tail;\r\n\r\n    if (device &&\r\n        resolvedDevice &&\r\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n      // This path points to another device so it is not applicable\r\n      continue;\r\n    }\r\n\r\n    if (!resolvedDevice) {\r\n      resolvedDevice = device;\r\n    }\r\n    if (!resolvedAbsolute) {\r\n      resolvedTail = tail + '\\\\' + resolvedTail;\r\n      resolvedAbsolute = isAbsolute;\r\n    }\r\n\r\n    if (resolvedDevice && resolvedAbsolute) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC\r\n  // root. Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path,\r\n  // but handle relative paths to be safe (might happen when process.cwd()\r\n  // fails)\r\n\r\n  // Normalize the tail path\r\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\r\n                                !resolvedAbsolute).join('\\\\');\r\n\r\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\r\n         '.';\r\n};\r\n\r\n\r\nwin32.normalize = function(path) {\r\n  var result = win32StatPath(path),\r\n      device = result.device,\r\n      isUnc = result.isUnc,\r\n      isAbsolute = result.isAbsolute,\r\n      tail = result.tail,\r\n      trailingSlash = /[\\\\\\/]$/.test(tail);\r\n\r\n  // Normalize the tail path\r\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\r\n\r\n  if (!tail && !isAbsolute) {\r\n    tail = '.';\r\n  }\r\n  if (tail && trailingSlash) {\r\n    tail += '\\\\';\r\n  }\r\n\r\n  // Convert slashes to backslashes when `device` points to an UNC root.\r\n  // Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    device = normalizeUNCRoot(device);\r\n  }\r\n\r\n  return device + (isAbsolute ? '\\\\' : '') + tail;\r\n};\r\n\r\n\r\nwin32.isAbsolute = function(path) {\r\n  return win32StatPath(path).isAbsolute;\r\n};\r\n\r\nwin32.join = function() {\r\n  var paths = [];\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i];\r\n    if (!util.isString(arg)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (arg) {\r\n      paths.push(arg);\r\n    }\r\n  }\r\n\r\n  var joined = paths.join('\\\\');\r\n\r\n  // Make sure that the joined path doesn't start with two slashes, because\r\n  // normalize() will mistake it for an UNC path then.\r\n  //\r\n  // This step is skipped when it is very clear that the user actually\r\n  // intended to point at an UNC path. This is assumed when the first\r\n  // non-empty string arguments starts with exactly two slashes followed by\r\n  // at least one more non-slash character.\r\n  //\r\n  // Note that for normalize() to treat a path as an UNC path it needs to\r\n  // have at least 2 components, so we don't filter for that here.\r\n  // This means that the user can use join to construct UNC paths from\r\n  // a server name and a share name; for example:\r\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\r\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\r\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\r\n  }\r\n\r\n  return win32.normalize(joined);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// it will solve the relative path from 'from' to 'to', for instance:\r\n// from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\nwin32.relative = function(from, to) {\r\n  from = win32.resolve(from);\r\n  to = win32.resolve(to);\r\n\r\n  // windows is not case sensitive\r\n  var lowerFrom = from.toLowerCase();\r\n  var lowerTo = to.toLowerCase();\r\n\r\n  var toParts = trimArray(to.split('\\\\'));\r\n\r\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\r\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));\r\n\r\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (lowerFromParts[i] !== lowerToParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (samePartsLength == 0) {\r\n    return to;\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('\\\\');\r\n};\r\n\r\n\r\nwin32._makeLong = function(path) {\r\n  // Note: this will *probably* throw somewhere.\r\n  if (!util.isString(path))\r\n    return path;\r\n\r\n  if (!path) {\r\n    return '';\r\n  }\r\n\r\n  var resolvedPath = win32.resolve(path);\r\n\r\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\r\n    // path is local filesystem path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\' + resolvedPath;\r\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\r\n    // path is network UNC path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n\r\nwin32.dirname = function(path) {\r\n  var result = win32SplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nwin32.basename = function(path, ext) {\r\n  var f = win32SplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nwin32.extname = function(path) {\r\n  return win32SplitPath(path)[3];\r\n};\r\n\r\n\r\nwin32.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir;\r\n  var base = pathObject.base || '';\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  if (dir[dir.length - 1] === win32.sep) {\r\n    return dir + base;\r\n  }\r\n  return dir + win32.sep + base;\r\n};\r\n\r\n\r\nwin32.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nwin32.sep = '\\\\';\r\nwin32.delimiter = ';';\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nposix.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path[0] === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\r\n                                !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nposix.normalize = function(path) {\r\n  var isAbsolute = posix.isAbsolute(path),\r\n      trailingSlash = path && path[path.length - 1] === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nposix.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nposix.join = function() {\r\n  var path = '';\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var segment = arguments[i];\r\n    if (!util.isString(segment)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (segment) {\r\n      if (!path) {\r\n        path += segment;\r\n      } else {\r\n        path += '/' + segment;\r\n      }\r\n    }\r\n  }\r\n  return posix.normalize(path);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nposix.relative = function(from, to) {\r\n  from = posix.resolve(from).substr(1);\r\n  to = posix.resolve(to).substr(1);\r\n\r\n  var fromParts = trimArray(from.split('/'));\r\n  var toParts = trimArray(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\n\r\nposix._makeLong = function(path) {\r\n  return path;\r\n};\r\n\r\n\r\nposix.dirname = function(path) {\r\n  var result = posixSplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nposix.basename = function(path, ext) {\r\n  var f = posixSplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nposix.extname = function(path) {\r\n  return posixSplitPath(path)[3];\r\n};\r\n\r\n\r\nposix.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\r\n  var base = pathObject.base || '';\r\n  return dir + base;\r\n};\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nposix.sep = '/';\r\nposix.delimiter = ':';\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32;\r\nelse /* posix */\r\n  module.exports = posix;\r\n\r\nmodule.exports.posix = posix;\r\nmodule.exports.win32 = win32;\r\n"]}