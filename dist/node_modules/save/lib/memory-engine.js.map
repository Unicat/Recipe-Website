{"version":3,"sources":["../../../../node_modules/save/lib/memory-engine.js"],"names":["emptyFn","extend","require","Mingo","es","module","exports","opts","options","idProperty","self","map","createOrUpdate","data","idSeq","setup","key","findById","id","query","find","first","checkForIdAndData","object","callback","foundObject","undefined","Error","create","emit","extendedObject","push","findOne","err","update","read","findByQuery","error","objects","cloned","overwrite","updatedObject","copy","remove","deleteMany","del","TypeError","cursor","fields","sort","limit","allData","getObjectCopies","all","readArray","pipe","cb","copies","forEach","count","length"],"mappings":"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","file":"memory-engine.js","sourcesContent":["var emptyFn = function () {}\n  , extend = require('lodash.assign')\n  , Mingo = require('mingo')\n  , es = require('event-stream')\n\nmodule.exports = function (opts) {\n  var options = extend({ idProperty: '_id' }, opts)\n    , self = es.map(createOrUpdate)\n    , data = []\n    , idSeq = 0\n\n  Mingo.setup({ key: options.idProperty })\n\n  function findById(id) {\n    var query = {}\n    query[ options.idProperty ] = id\n    return Mingo.find(data, query).first()\n  }\n\n  /**\n   * Checks that the object has the ID property present, then checks\n   * if the data object has that ID value present.e\n   *\n   * Returns an Error to the callback if either of the above checks fail\n   *\n   * @param {Object} object to check\n   * @param {Function} callback\n   * @api private\n   */\n  function checkForIdAndData(object, callback) {\n    var id = object[options.idProperty]\n      , foundObject\n    if (id === undefined || id === null) {\n      return callback(new Error('Object has no \\''\n        + options.idProperty + '\\' property'))\n    }\n\n    foundObject = findById(id)\n\n    if (foundObject === null) {\n      return callback(new Error('No object found with \\''\n        + options.idProperty + '\\' = \\'' + id + '\\''))\n    }\n\n    return callback(null, foundObject)\n  }\n\n  /**\n   * Create a new entity. Emits a 'create' event.\n   *\n   * @param {Object} object to create\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function create(object, callback) {\n    self.emit('create', object)\n    callback = callback || emptyFn\n    // clone the object\n    var extendedObject = extend({}, object)\n\n    if (!extendedObject[options.idProperty]) {\n      idSeq += 1\n      extendedObject[options.idProperty] = '' + idSeq\n    } else {\n      if (findById(extendedObject[options.idProperty]) !== null) {\n        return callback(new Error('Key ' + extendedObject[options.idProperty] + ' already exists'))\n      }\n      // if an id is provided, cast to string.\n      extendedObject[options.idProperty] = '' + extendedObject[options.idProperty]\n    }\n    data.push(extend({}, extendedObject))\n    self.emit('afterCreate', extendedObject)\n    callback(undefined, extendedObject)\n  }\n\n  /**\n   * Create or update a entity. Emits a 'create' event or a 'update'.\n   *\n   * @param {Object} object to create or update\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function createOrUpdate(object, callback) {\n    if (typeof object[options.idProperty] === 'undefined') {\n      // Create a new object\n      self.create(object, callback)\n    } else {\n      // Try and find the object first to update\n      var query = {}\n      query[options.idProperty] = object[options.idProperty]\n\n      self.findOne(query, function (err, foundObject) {\n        if (foundObject) {\n          // We found the object so update\n          self.update(object, callback)\n        } else {\n          // We didn't find the object so create\n          self.create(object, callback)\n        }\n      })\n    }\n  }\n\n  /**\n   * Reads a single entity. Emits a 'read' event.\n   *\n   * @param {Number} id to read\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function read(id, callback) {\n    var query = {}\n\n    self.emit('read', id)\n    callback = callback || emptyFn\n    query[options.idProperty] = '' + id\n    findByQuery(query, {}, function (error, objects) {\n      if (objects[0] !== undefined) {\n        var cloned = extend({}, objects[0])\n        self.emit('received', cloned)\n        callback(undefined, cloned)\n      } else {\n        callback(undefined, undefined)\n      }\n    })\n  }\n\n  /**\n   * Updates a single entity. Emits an 'update' event. Optionally overwrites\n   * the entire entity, by default just extends it with the new values.\n   *\n   * @param {Object} object to update\n   * @param {Boolean} whether to overwrite or extend the existing entity\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function update(object, overwrite, callback) {\n    if (typeof overwrite === 'function') {\n      callback = overwrite\n      overwrite = false\n    }\n    self.emit('update', object, overwrite)\n    callback = callback || emptyFn\n    var id = '' + object[options.idProperty]\n      , updatedObject\n\n    checkForIdAndData(object, function (error, foundObject) {\n      if (error) {\n        return callback(error)\n      }\n\n      if (overwrite) {\n        updatedObject = extend({}, object)\n      } else {\n        updatedObject = extend({}, foundObject, object)\n      }\n\n      var query = {}\n        , copy = extend({}, updatedObject)\n      query[ options.idProperty ] = id\n      data = Mingo.remove(data, query)\n      data.push(updatedObject)\n      self.emit('afterUpdate', copy, overwrite)\n      callback(undefined, copy)\n    })\n  }\n\n  /**\n   * Deletes entities based on a query. Emits a 'delete' event. Performs a find\n   * by query, then calls delete for each item returned. Returns an error if no\n   * items match the query.\n   *\n   * @param {Object} query to delete on\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function deleteMany(query, callback) {\n    callback = callback || emptyFn\n    self.emit('deleteMany', query)\n    data = Mingo.remove(data, query)\n    self.emit('afterDeleteMany', query)\n    callback()\n  }\n\n  /**\n   * Deletes one entity. Emits a 'delete' event. Returns an error if the\n   * object can not be found or if the ID property is not present.\n   *\n   * @param {Object} object to delete\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function del(id, callback) {\n\n    callback = callback || emptyFn\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function or empty')\n    }\n\n    self.emit('delete', id)\n    var query = {}\n    query[ options.idProperty ] = id\n    deleteMany(query, function() {\n      self.emit('afterDelete', '' + id)\n      callback(undefined)\n    })\n  }\n\n  /**\n   * Performs a find on the data by search query.\n   *\n   * Sorting can be done similarly to mongo by providing a $sort option to\n   * the options object.\n   *\n   * The query can target fields in a subdocument similarly to mongo by passing\n   * a string reference to the subdocument in dot notation.\n   *\n   * @param {Object} query to search by\n   * @param {Object} search options\n   * @param {Function} callback\n   * @api private\n   */\n  function findByQuery(query, options, callback) {\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    var cursor = Mingo.find(data, query, options && options.fields)\n    if (options && options.sort) cursor = cursor.sort(options.sort)\n    if (options && options.limit) cursor = cursor.limit(options.limit)\n\n    var allData = getObjectCopies(cursor.all())\n\n    if (callback === undefined) {\n\n      return es.readArray(allData).pipe(es.map(function (data, cb) {\n          self.emit('received', data)\n          cb(null, data)\n        }))\n    } else {\n      callback(null, allData)\n    }\n\n  }\n\n  function getObjectCopies(objects) {\n    var copies = []\n    objects.forEach(function (object) {\n      copies.push(extend({}, object))\n    })\n    return copies\n  }\n\n  /**\n   * Performs a find on the data. Emits a 'find' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function find(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    self.emit('find', query, options)\n    if (callback !== undefined) {\n      findByQuery(query, options, function(error, data) {\n        if (error) return callback(error)\n        self.emit('received', data)\n        callback(null, data)\n      })\n    } else {\n      return findByQuery(query, options)\n    }\n  }\n\n  /**\n   * Performs a find on the data and limits the result set to 1.\n   * Emits a 'findOne' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function findOne(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    self.emit('findOne', query, options)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects[0])\n      callback(undefined, objects[0])\n    })\n  }\n\n  /**\n   * Performs a count by query. Emits a 'count' event.\n   *\n   * @param {Object} query to search by\n   * @param {Function} callback\n   * @api public\n   */\n  function count(query, callback) {\n    self.emit('count', query)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects.length)\n      callback(undefined, objects.length)\n    })\n  }\n\n  extend(self\n    , { create: create\n      , read: read\n      , update: update\n      , 'delete': del\n      , deleteMany: deleteMany\n      , find: find\n      , findOne: findOne\n      , count: count\n      , idProperty: options.idProperty\n      , createOrUpdate: createOrUpdate\n      })\n\n  return self\n\n}\n"]}