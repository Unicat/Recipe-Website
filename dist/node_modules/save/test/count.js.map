{"version":3,"sources":["../../../../node_modules/save/test/count.js"],"names":["async","require","module","exports","idProperty","getEngine","describe","it","done","error","engine","count","should","equal","on","entity","eql","a","data","map","create"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;;AAEAC,OAAOC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,SAArB,EAAgC;;AAE/CC,WAAS,UAAT,EAAqB,YAAY;;AAE/BC,OAAG,iDAAH,EAAsD,UAAUC,IAAV,EAAgB;AACpEH,gBAAU,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AACjCA,eAAOC,KAAP,CAAa,EAAb,EAAiB,UAAUF,KAAV,EAAiBE,KAAjB,EAAwB;AACvCA,gBAAMC,MAAN,CAAaC,KAAb,CAAmB,CAAnB;AACAL;AACD,SAHD;AAID,OALD;AAMD,KAPD;;AASAD,OAAG,+BAAH,EAAoC,UAAUC,IAAV,EAAgB;AAClDH,gBAAU,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AACjCA,eAAOI,EAAP,CAAU,OAAV,EAAmB,UAAUC,MAAV,EAAkB;AACnCA,iBAAOH,MAAP,CAAcI,GAAd,CAAkB,EAAEC,GAAG,CAAL,EAAlB;AACAT;AACD,SAHD;;AAKAE,eAAOC,KAAP,CAAa,EAAEM,GAAG,CAAL,EAAb,EAAuB,YAAY,CAClC,CADD;AAGD,OATD;AAUD,KAXD;;AAcAV,OAAG,kCAAH,EAAuC,UAAUC,IAAV,EAAgB;AACrDH,gBAAU,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AACjCA,eAAOI,EAAP,CAAU,UAAV,EAAsB,UAAUI,IAAV,EAAgB;AACpCA,eAAKN,MAAL,CAAYI,GAAZ,CAAgB,CAAhB;AACAR;AACD,SAHD;;AAKAE,eAAOC,KAAP,CAAa,EAAEM,GAAG,CAAL,EAAb,EAAuB,YAAY,CAClC,CADD;AAGD,OATD;AAUD,KAXD;;AAaAV,OAAG,oDAAH,EAAyD,UAAUC,IAAV,EAAgB;AACvEH,gBAAU,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AACjCV,cAAMmB,GAAN,CAAU,CAAE,EAAEF,GAAG,CAAL,EAAF,EAAY,EAAEA,GAAG,CAAL,EAAZ,EAAsB,EAAEA,GAAG,CAAL,EAAtB,EAAgC,EAAEA,GAAG,CAAL,EAAhC,CAAV,EAAsDP,OAAOU,MAA7D,EAAqE,YAAY;AAC/EV,iBAAOC,KAAP,CAAa,EAAEM,GAAG,CAAL,EAAb,EAAuB,UAAUR,KAAV,EAAiBE,KAAjB,EAAwB;AAC7CA,kBAAMC,MAAN,CAAaC,KAAb,CAAmB,CAAnB;AACAL;AACD,WAHD;AAID,SALD;AAMD,OAPD;AAQD,KATD;;AAWAD,OAAG,2CAAH,EAAgD,UAAUC,IAAV,EAAgB;AAC9DH,gBAAU,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AACjCV,cAAMmB,GAAN,CAAU,CAAE,EAAEF,GAAG,CAAL,EAAF,EAAY,EAAEA,GAAG,CAAL,EAAZ,EAAsB,EAAEA,GAAG,CAAL,EAAtB,EAAgC,EAAEA,GAAG,CAAL,EAAhC,CAAV,EAAsDP,OAAOU,MAA7D,EAAqE,YAAY;AAC/EV,iBAAOC,KAAP,CAAa,EAAb,EAAiB,UAAUF,KAAV,EAAiBE,KAAjB,EAAwB;AACvCA,kBAAMC,MAAN,CAAaC,KAAb,CAAmB,CAAnB;AACAL;AACD,WAHD;AAID,SALD;AAMD,OAPD;AAQD,KATD;AAUD,GA3DD;AA4DD,CA9DD","file":"count.js","sourcesContent":["var async = require('async')\n\nmodule.exports = function(idProperty, getEngine) {\n\n  describe('#count()', function () {\n\n    it('should return 0 count if no objects match query', function (done) {\n      getEngine(function (error, engine) {\n        engine.count({}, function (error, count) {\n          count.should.equal(0)\n          done()\n        })\n      })\n    })\n\n    it('should emit a \\'count\\' event', function (done) {\n      getEngine(function (error, engine) {\n        engine.on('count', function (entity) {\n          entity.should.eql({ a: 1 })\n          done()\n        })\n\n        engine.count({ a: 1 }, function () {\n        })\n\n      })\n    })\n\n\n    it('should emit a \\'received\\' event', function (done) {\n      getEngine(function (error, engine) {\n        engine.on('received', function (data) {\n          data.should.eql(0)\n          done()\n        })\n\n        engine.count({ a: 1 }, function () {\n        })\n\n      })\n    })\n\n    it('should return correct count if objects match query', function (done) {\n      getEngine(function (error, engine) {\n        async.map([ { a: 3 }, { a: 1 }, { a: 2 }, { a: 2 } ], engine.create, function () {\n          engine.count({ a: 2 }, function (error, count) {\n            count.should.equal(2)\n            done()\n          })\n        })\n      })\n    })\n\n    it('should return total count with a {} query', function (done) {\n      getEngine(function (error, engine) {\n        async.map([ { a: 3 }, { a: 1 }, { a: 2 }, { a: 2 } ], engine.create, function () {\n          engine.count({}, function (error, count) {\n            count.should.equal(4)\n            done()\n          })\n        })\n      })\n    })\n  })\n}\n"]}