{"version":3,"sources":["../../../../node_modules/save/test/streaming.js"],"names":["assert","require","Stream","streamAssert","map","module","exports","idProperty","getEngine","describe","it","done","error","engine","ok","pipe","first","data","deepEqual","a","end","write","create","err","existingEntity","equal","_id","find","b","documents","stream","second","receivedData","on","push","length","Error"],"mappings":"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","file":"streaming.js","sourcesContent":["var assert = require('assert')\n  , Stream = require('stream').Stream\n  , streamAssert = require('stream-assert')\n  , map = require('async').map\n\nmodule.exports = function(idProperty, getEngine) {\n\n  describe('WriteStream', function () {\n\n    it('should be a write stream', function (done) {\n\n      getEngine(function (error, engine) {\n        assert.ok(engine instanceof Stream, 'not a Stream')\n        done()\n      })\n    })\n\n    it('should create new documents when data is written', function (done) {\n\n      getEngine(function (error, engine) {\n        engine\n        .pipe(streamAssert.first(function(data) {\n            assert.deepEqual(data.a, 1)\n          }))\n        .pipe(streamAssert.end(done))\n\n        engine.write({ a: 1 })\n        engine.end()\n      })\n    })\n\n    it('should update documents if data has a idProperty when written to stream', function (done) {\n\n      getEngine(function (error, engine) {\n\n        engine.create({ a: 1, }, function(err, existingEntity) {\n\n          engine\n            .pipe(streamAssert.first(function(data) {\n                assert.equal(data.a, 2)\n                assert.equal(existingEntity._id, data._id)\n              }))\n            .pipe(streamAssert.end(done))\n\n            engine.write({ _id: existingEntity._id, a: 2 })\n            engine.end()\n        })\n      })\n    })\n\n    it('should insert if idProperty is given but not found', function (done) {\n\n      getEngine(function (error, engine) {\n\n        engine\n          .pipe(streamAssert.first(function(data) {\n              assert.equal(data.a, 2)\n            }))\n          .pipe(streamAssert.end(done))\n\n        engine.write({ _id: 1, a: 2 })\n        engine.end()\n      })\n    })\n  })\n\n  describe('ReadStream', function() {\n\n    it('should return ReadStream if no callback is provided', function (done) {\n      getEngine(function (error, engine) {\n        assert.ok(engine.find({}) instanceof Stream, 'not a instance of Stream')\n        done()\n      })\n    })\n\n    it('should stream result data via ‘objectIdToString’ transformation', function (done) {\n\n      getEngine(function (error, engine) {\n        map([ { a: 1, b: 0 }, { a: 2, b: 0 } ], engine.create, function (error, documents) {\n          var stream = engine.find({ b: 0 })\n          stream\n          .pipe(streamAssert.first(function(data) { assert.deepEqual(data, documents[0]) }))\n          .pipe(streamAssert.second(function(data) { assert.deepEqual(data, documents[1]) }))\n          .pipe(streamAssert.end(done))\n        })\n      })\n    })\n\n    it('should emit `received`', function (done) {\n\n      getEngine(function (error, engine) {\n        map([ { a: 1, b: 0 }, { a: 2, b: 0 } ], engine.create, function (error, documents) {\n          var receivedData = []\n          engine.on('received', function (data) {\n            receivedData.push(data)\n            if (data.length === 2) {\n              done()\n            } else if (data.length > 2) {\n               done(new Error('Too many events emitted'))\n            }\n          })\n          var stream = engine.find({ b: 0 })\n          stream\n          .pipe(streamAssert.first(function(data) { assert.deepEqual(data, documents[0]) }))\n          .pipe(streamAssert.second(function(data) { assert.deepEqual(data, documents[1]) }))\n          .pipe(streamAssert.end(done))\n\n        })\n      })\n    })\n\n  })\n}\n"]}