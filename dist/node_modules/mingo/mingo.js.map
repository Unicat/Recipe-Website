{"version":3,"sources":["../../../node_modules/mingo/mingo.js"],"names":["root","undefined","Mingo","previousMingo","_","VERSION","noConflict","nodeEnabled","module","require","exports","primitives","isString","isBoolean","isNumber","isDate","isNull","isRegExp","isUndefined","isPrimitive","value","i","length","NATIVE_CONSTRUCTORS","isSimpleType","contains","constructor","name","normalize","expr","isObject","keys","notQuery","intersection","ops","OP_QUERY","regex","options","modifiers","ignoreCase","indexOf","multiline","global","RegExp","settings","key","setup","extend","Query","criteria","projection","_criteria","_projection","_compiled","_compile","prototype","isEmpty","isArray","isFunction","Error","field","has","_processOperator","op","operator","push","queryOperators","test","obj","find","collection","Cursor","remove","arr","Transform","util","stream","Stream","query","objectMode","call","_query","inherits","_transform","chunk","encoding","done","cursor","hasNext","next","_collection","_operators","_result","_position","_fetch","self","filter","pipeline","each","pick","aggregator","Aggregator","run","all","first","count","last","skip","n","limit","sort","modifier","max","groupOperators","$max","min","$min","map","callback","forEach","operators","OP_PIPELINE","pipelineOperators","getValue","result","resolve","names","split","isText","match","res","item","aggregate","addOperators","type","f","newOperators","computeValue","OP_AGGREGATE","OP_GROUP","OP_PROJECTION","wrapped","ctx","selector","lhs","args","Array","slice","arguments","apply","OPERATORS","CollectionMixin","toJSON","$group","idKey","partitions","groupBy","omit","accumulate","groups","$match","$project","projected","objKeys","idOnlyExcludedExpression","id","without","cloneObj","foundSlice","foundExclusion","dropKeys","subExpr","newValue","temp","projectionOperators","defaults","$limit","$skip","rest","$unwind","substr","tmp","clone","$sort","sortKeys","reverse","grouped","sortedIndex","findIndex","k","hashcode","indexKeys","sortBy","compoundOperators","$and","queries","$or","$nor","$not","$where","Function","simpleOperators","$eq","a","b","flatten","val","isEqual","$ne","$in","$nin","$lt","$lte","$gt","$gte","$mod","$regex","$exists","$all","matched","$elemMatch","$size","$type","isNumeric","$","array","$slice","$addToSet","uniq","$sum","reduce","acc","$avg","$push","$first","$last","arithmeticOperators","$add","memo","num","$subtract","$divide","$multiply","stringOperators","$concat","join","$strcasecmp","toUpperCase","$substr","$toLower","toLowerCase","$toUpper","dateOperators","$dayOfYear","d","start","Date","getFullYear","diff","oneDay","Math","round","$dayOfMonth","getDate","$dayOfWeek","getDay","$year","$month","getMonth","$week","setHours","setDate","yearStart","floor","$hour","getHours","$minute","getMinutes","$second","getSeconds","$millisecond","getMilliseconds","$dateToString","fmt","date","matches","len","hdlr","DATE_SYM_TABLE","fn","pad","padDigits","replace","setOperators","$setEquals","second","difference","$setIntersection","$setDifference","$setUnion","union","$setIsSubset","$anyElementTrue","$allElementsTrue","conditionalOperators","$cond","ifExpr","thenExpr","elseExpr","condition","$ifNull","comparisonOperators","$cmp","arrayOperators","literalOperators","$literal","variableOperators","$map","inputExpr","asExpr","inExpr","tempKey","original","$let","varsExpr","originals","varsKeys","booleanOperators","every","some","aggregateOperators","number","digits","String","lookup","h","index","encode","toString","toISOString","JSON","stringify","v","mapObject","hash","chr","s","charCodeAt"],"mappings":"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","file":"mingo.js","sourcesContent":["// Mingo.js 0.6.5\n// Copyright (c) 2016 Francis Asante <kofrasa@gmail.com>\n// MIT\n\n;\n(function (root, undefined) {\n\n  \"use strict\";\n\n  // global on the server, window in the browser\n  var Mingo = {}, previousMingo;\n  var _;\n\n  Mingo.VERSION = '0.6.5';\n\n  // backup previous Mingo\n  if (root != null) {\n    previousMingo = root.Mingo;\n  }\n\n  Mingo.noConflict = function () {\n    root.Mingo = previousMingo;\n    return Mingo;\n  };\n\n  var nodeEnabled = ('undefined' !== typeof module && 'undefined' !== typeof require);\n\n  // Export the Mingo object for Node.js\n  if (nodeEnabled) {\n    if (typeof module !== 'undefined') {\n      module.exports = Mingo;\n    }\n    _ = require(\"underscore\"); // get a reference to underscore\n  } else {\n    root.Mingo = Mingo;\n    _ = root._; // get a reference to underscore\n  }\n\n  // quick reference for\n  var primitives = [\n    _.isString, _.isBoolean, _.isNumber, _.isDate, _.isNull, _.isRegExp, _.isUndefined\n  ];\n\n  function isPrimitive(value) {\n    for (var i = 0; i < primitives.length; i++) {\n      if (primitives[i](value)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var NATIVE_CONSTRUCTORS = [\"Object\", \"Array\"];\n  // primitives and user-defined types\n  function isSimpleType(value) {\n    return isPrimitive(value) || !_.contains(NATIVE_CONSTRUCTORS, value.constructor.name);\n  }\n\n  /**\n   * Simplify expression for easy evaluation with query operators map\n   * @param expr\n   * @returns {*}\n   */\n  function normalize(expr) {\n\n    // normalized primitives\n    if (isSimpleType(expr)) {\n      return _.isRegExp(expr) ? {\"$regex\": expr} : {\"$eq\": expr};\n    }\n\n    // normalize object expression\n    if (_.isObject(expr)) {\n      var keys = _.keys(expr);\n      var notQuery = _.intersection(ops(OP_QUERY), keys).length === 0;\n\n      // no valid query operator found, so we do simple comparison\n      if (notQuery) {\n        return {\"$eq\": expr};\n      }\n\n      // ensure valid regex\n      if (_.contains(keys, \"$regex\")) {\n        var regex = expr['$regex'];\n        var options = expr['$options'] || \"\";\n        var modifiers = \"\";\n        if (_.isString(regex)) {\n          modifiers += (regex.ignoreCase || options.indexOf(\"i\") >= 0) ? \"i\" : \"\";\n          modifiers += (regex.multiline || options.indexOf(\"m\") >= 0) ? \"m\" : \"\";\n          modifiers += (regex.global || options.indexOf(\"g\") >= 0) ? \"g\" : \"\";\n          regex = new RegExp(regex, modifiers);\n        }\n        expr['$regex'] = regex;\n        delete expr['$options'];\n      }\n    }\n\n    return expr;\n  }\n\n  // Settings used by Mingo internally\n  var settings = {\n    key: \"_id\"\n  };\n\n  /**\n   * Setup default settings for Mingo\n   * @param options\n   */\n  Mingo.setup = function (options) {\n    _.extend(settings, options || {});\n  };\n\n\n  /**\n   * Query object to test collection elements with\n   * @param criteria the pass criteria for the query\n   * @param projection optional projection specifiers\n   * @constructor\n   */\n  Mingo.Query = function (criteria, projection) {\n    if (!(this instanceof Mingo.Query))\n      return new Mingo.Query(criteria, projection);\n\n    this._criteria = criteria;\n    this._projection = projection;\n    this._compiled = [];\n    this._compile();\n  };\n\n  Mingo.Query.prototype = {\n\n    _compile: function () {\n\n      if (_.isEmpty(this._criteria)) return;\n\n      if (_.isArray(this._criteria) || _.isFunction(this._criteria) || !_.isObject(this._criteria)) {\n        throw new Error(\"Invalid type for criteria\");\n      }\n\n      for (var field in this._criteria) {\n        if (_.has(this._criteria, field)) {\n          var expr = this._criteria[field];\n          if (_.contains(['$and', '$or', '$nor', '$where'], field)) {\n            this._processOperator(field, field, expr);\n          } else {\n            // normalize expression\n            expr = normalize(expr);\n            for (var op in expr) {\n              if (_.has(expr, op)) {\n                this._processOperator(field, op, expr[op]);\n              }\n            }\n          }\n        }\n      }\n    },\n\n    _processOperator: function (field, operator, value) {\n      if (_.contains(ops(OP_QUERY), operator)) {\n        this._compiled.push(queryOperators[operator](field, value));\n      } else {\n        throw new Error(\"Invalid query operator '\" + operator + \"' detected\");\n      }\n    },\n\n    /**\n     * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n     * @param obj\n     * @returns {boolean}\n     */\n    test: function (obj) {\n      for (var i = 0; i < this._compiled.length; i++) {\n        if (!this._compiled[i].test(obj)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Performs a query on a collection and returns a cursor object.\n     * @param collection\n     * @param projection\n     * @returns {Mingo.Cursor}\n     */\n    find: function (collection, projection) {\n      return new Mingo.Cursor(collection, this, projection);\n    },\n\n    /**\n     * Remove matched documents from the collection returning the remainder\n     * @param collection\n     * @returns {Array}\n     */\n    remove: function (collection) {\n      var arr = [];\n      for (var i = 0; i < collection.length; i++) {\n        if (!this.test(collection[i])) {\n          arr.push(collection[i]);\n        }\n      }\n      return arr;\n    }\n  };\n\n  if (nodeEnabled) {\n\n    var Transform = require('stream').Transform;\n    var util = require('util');\n\n    Mingo.Query.prototype.stream = function (options) {\n      return new Mingo.Stream(this, options);\n    };\n\n    /**\n     * Create a Transform class\n     * @param query\n     * @param options\n     * @returns {Mingo.Stream}\n     * @constructor\n     */\n    Mingo.Stream = function (query, options) {\n\n      if (!(this instanceof Mingo.Stream))\n        return new Mingo.Stream(query, options);\n\n      options = options || {};\n      _.extend(options, {objectMode: true});\n      Transform.call(this, options);\n      // query for this stream\n      this._query = query;\n    };\n    // extend Transform\n    util.inherits(Mingo.Stream, Transform);\n\n    Mingo.Stream.prototype._transform = function (chunk, encoding, done) {\n      if (_.isObject(chunk) && this._query.test(chunk)) {\n        if (_.isEmpty(this._query._projection)) {\n          this.push(chunk);\n        } else {\n          var cursor = new Mingo.Cursor([chunk], this._query);\n          if (cursor.hasNext()) {\n            this.push(cursor.next());\n          }\n        }\n      }\n      done();\n    };\n  }\n\n  /**\n   * Cursor to iterate and perform filtering on matched objects\n   * @param collection\n   * @param query\n   * @param projection\n   * @constructor\n   */\n  Mingo.Cursor = function (collection, query, projection) {\n\n    if (!(this instanceof Mingo.Cursor))\n      return new Mingo.Cursor(collection, query, projection);\n\n    this._query = query;\n    this._collection = collection;\n    this._projection = projection || query._projection;\n    this._operators = {};\n    this._result = false;\n    this._position = 0;\n  };\n\n  Mingo.Cursor.prototype = {\n\n    _fetch: function () {\n      var self = this;\n\n      if (this._result !== false) {\n        return this._result;\n      }\n\n      // inject projection operator\n      if (_.isObject(this._projection)) {\n        _.extend(this._operators, {\"$project\": this._projection});\n      }\n\n      if (!_.isArray(this._collection)) {\n        throw new Error(\"Input collection is not of valid type. Must be an Array.\");\n      }\n\n      // filter collection\n      this._result = _.filter(this._collection, this._query.test, this._query);\n      var pipeline = [];\n\n      _.each(['$sort', '$skip', '$limit', '$project'], function (op) {\n        if (_.has(self._operators, op)) {\n          pipeline.push(_.pick(self._operators, op));\n        }\n      });\n\n      if (pipeline.length > 0) {\n        var aggregator = new Mingo.Aggregator(pipeline);\n        this._result = aggregator.run(this._result, this._query);\n      }\n      return this._result;\n    },\n\n    /**\n     * Fetch and return all matched results\n     * @returns {Array}\n     */\n    all: function () {\n      return this._fetch();\n    },\n\n    /**\n     * Fetch and return the first matching result\n     * @returns {Object}\n     */\n    first: function () {\n      return this.count() > 0 ? this._fetch()[0] : null;\n    },\n\n    /**\n     * Fetch and return the last matching object from the result\n     * @returns {Object}\n     */\n    last: function () {\n      return this.count() > 0 ? this._fetch()[this.count() - 1] : null;\n    },\n\n    /**\n     * Counts the number of matched objects found\n     * @returns {Number}\n     */\n    count: function () {\n      return this._fetch().length;\n    },\n\n    /**\n     * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n     * @param {Number} n the number of results to skip.\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    skip: function (n) {\n      _.extend(this._operators, {\"$skip\": n});\n      return this;\n    },\n\n    /**\n     * Constrains the size of a cursor's result set.\n     * @param {Number} n the number of results to limit to.\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    limit: function (n) {\n      _.extend(this._operators, {\"$limit\": n});\n      return this;\n    },\n\n    /**\n     * Returns results ordered according to a sort specification.\n     * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    sort: function (modifier) {\n      _.extend(this._operators, {\"$sort\": modifier});\n      return this;\n    },\n\n    /**\n     * Returns the next document in a cursor.\n     * @returns {Object | Boolean}\n     */\n    next: function () {\n      if (this.hasNext()) {\n        return this._fetch()[this._position++];\n      }\n      return null;\n    },\n\n    /**\n     * Returns true if the cursor has documents and can be iterated.\n     * @returns {boolean}\n     */\n    hasNext: function () {\n      return this.count() > this._position;\n    },\n\n    /**\n     * Specifies the exclusive upper bound for a specific field\n     * @param expr\n     * @returns {Number}\n     */\n    max: function (expr) {\n      return groupOperators.$max(this._fetch(), expr);\n    },\n\n    /**\n     * Specifies the inclusive lower bound for a specific field\n     * @param expr\n     * @returns {Number}\n     */\n    min: function (expr) {\n      return groupOperators.$min(this._fetch(), expr);\n    },\n\n    /**\n     * Applies a function to each document in a cursor and collects the return values in an array.\n     * @param callback\n     * @returns {Array}\n     */\n    map: function (callback) {\n      return _.map(this._fetch(), callback);\n    },\n\n    /**\n     * Applies a JavaScript function for every document in a cursor.\n     * @param callback\n     */\n    forEach: function (callback) {\n      _.each(this._fetch(), callback);\n    }\n\n  };\n\n  /**\n   * Aggregator for defining filter using mongoDB aggregation pipeline syntax\n   * @param operators an Array of pipeline operators\n   * @constructor\n   */\n  Mingo.Aggregator = function (operators) {\n    if (!(this instanceof Mingo.Aggregator))\n      return new Mingo.Aggregator(operators);\n\n    this._operators = operators;\n  };\n\n  Mingo.Aggregator.prototype = {\n\n    /**\n     * Apply the pipeline operations over the collection by order of the sequence added\n     * @param collection an array of objects to process\n     * @param query the `Mingo.Query` object to use as context\n     * @returns {Array}\n     */\n    run: function (collection, query) {\n      if (!_.isEmpty(this._operators)) {\n        // run aggregation pipeline\n        for (var i = 0; i < this._operators.length; i++) {\n          var operator = this._operators[i];\n          var key = _.keys(operator);\n          if (key.length == 1 && _.contains(ops(OP_PIPELINE), key[0])) {\n            key = key[0];\n            if (query instanceof Mingo.Query) {\n              collection = pipelineOperators[key].call(query, collection, operator[key]);\n            } else {\n              collection = pipelineOperators[key](collection, operator[key]);\n            }\n          } else {\n            throw new Error(\"Invalid aggregation operator '\" + key + \"'\");\n          }\n        }\n      }\n      return collection;\n    }\n  };\n\n  /**\n   * Retrieve the value of a given key on an object\n   * @param obj\n   * @param field\n   * @returns {*}\n   * @private\n   */\n  function getValue(obj, field) {\n    return _.result(obj, field);\n  }\n\n  /**\n   * Resolve the value of the field (dot separated) on the given object\n   * @param obj\n   * @param field\n   * @returns {*}\n   */\n  function resolve(obj, field) {\n    if (!field) {\n      return undefined;\n    }\n    var names = field.split(\".\");\n    var value = obj;\n    var isText;\n\n    for (var i = 0; i < names.length; i++) {\n      isText = names[i].match(/^\\d+$/) === null;\n\n      if (isText && _.isArray(value)) {\n        var res = [];\n        _.each(value, function (item) {\n          res.push(resolve(item, names[i]));\n        });\n        value = res;\n      } else {\n        value = getValue(value, names[i]);\n      }\n\n      if (value === undefined) {\n        break;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Performs a query on a collection and returns a cursor object.\n   * @param collection\n   * @param criteria\n   * @param projection\n   * @returns {Mingo.Cursor}\n   */\n  Mingo.find = function (collection, criteria, projection) {\n    return (new Mingo.Query(criteria)).find(collection, projection);\n  };\n\n  /**\n   * Returns a new array without objects which match the criteria\n   * @param collection\n   * @param criteria\n   * @returns {Array}\n   */\n  Mingo.remove = function (collection, criteria) {\n    return (new Mingo.Query(criteria)).remove(collection);\n  };\n\n  /**\n   * Return the result collection after running the aggregation pipeline for the given collection\n   * @param collection\n   * @param pipeline\n   * @returns {Array}\n   */\n  Mingo.aggregate = function (collection, pipeline) {\n    if (!_.isArray(pipeline)) {\n      throw new Error(\"Aggregation pipeline must be an array\");\n    }\n    return (new Mingo.Aggregator(pipeline)).run(collection);\n  };\n\n  /**\n   * Add new operators\n   * @param type the operator type to extend\n   * @param f a function returning an object of new operators\n   */\n  Mingo.addOperators = function (type, f) {\n    var newOperators = f({\n      resolve: resolve,\n      computeValue: computeValue,\n      ops: ops,\n      key: function () {\n        return settings.key;\n      }\n    });\n\n    // ensure correct type specified\n    if (!_.contains([OP_AGGREGATE, OP_GROUP, OP_PIPELINE, OP_PROJECTION, OP_QUERY], type)) {\n      throw new Error(\"Could not identify type '\" + type + \"'\");\n    }\n\n    var operators = ops(type);\n\n    // check for existing operators\n    _.each(_.keys(newOperators), function (op) {\n      if (!/^\\$\\w+$/.test(op)) {\n        throw new Error(\"Invalid operator name '\" + op + \"'\");\n      }\n      if (_.contains(operators, op)) {\n        throw new Error(\"Operator \" + op + \" is already defined for \" + type + \" operators\");\n      }\n    });\n\n    var wrapped = {};\n\n    switch (type) {\n      case OP_QUERY:\n        _.each(_.keys(newOperators), function (op) {\n          wrapped[op] = (function (f, ctx) {\n            return function (selector, value) {\n              return {\n                test: function (obj) {\n                  // value of field must be fully resolved.\n                  var lhs = resolve(obj, selector);\n                  var result = f.call(ctx, selector, lhs, value);\n                  if (_.isBoolean(result)) {\n                    return result;\n                  } else if (result instanceof Mingo.Query) {\n                    return result.test(obj);\n                  } else {\n                    throw new Error(\"Invalid return type for '\" + op + \"'. Must return a Boolean or Mingo.Query\");\n                  }\n                }\n              };\n            }\n          }(newOperators[op], newOperators));\n        });\n        break;\n      case OP_PROJECTION:\n        _.each(_.keys(newOperators), function (op) {\n          wrapped[op] = (function (f, ctx) {\n            return function (obj, expr, selector) {\n              var lhs = resolve(obj, selector);\n              return f.call(ctx, selector, lhs, expr);\n            }\n          }(newOperators[op], newOperators));\n        });\n        break;\n      default:\n        _.each(_.keys(newOperators), function (op) {\n          wrapped[op] = (function (f, ctx) {\n            return function () {\n              var args = Array.prototype.slice.call(arguments);\n              return f.apply(ctx, args);\n            }\n          }(newOperators[op], newOperators));\n        });\n    }\n\n    // toss the operator salad :)\n    _.extend(OPERATORS[type], wrapped);\n\n  };\n\n  /**\n   * Mixin for Backbone.Collection objects\n   */\n  Mingo.CollectionMixin = {\n    /**\n     * Runs a query and returns a cursor to the result\n     * @param criteria\n     * @param projection\n     * @returns {Mingo.Cursor}\n     */\n    query: function (criteria, projection) {\n      return Mingo.find(this.toJSON(), criteria, projection);\n    },\n\n    /**\n     * Runs the given aggregation operators on this collection\n     * @params pipeline\n     * @returns {Array}\n     */\n    aggregate: function (pipeline) {\n      var args = [this.toJSON(), pipeline];\n      return Mingo.aggregate.apply(null, args);\n    }\n  };\n\n  var pipelineOperators = {\n\n    /**\n     * Groups documents together for the purpose of calculating aggregate values based on a collection of documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $group: function (collection, expr) {\n      // lookup key for grouping\n      var idKey = expr[settings.key];\n\n      var partitions = groupBy(collection, function (obj) {\n        return computeValue(obj, idKey, idKey);\n      });\n\n      var result = [];\n\n      // remove the group key\n      expr = _.omit(expr, settings.key);\n\n      _.each(partitions.keys, function (value, i) {\n        var obj = {};\n\n        // exclude undefined key value\n        if (!_.isUndefined(value)) {\n          obj[settings.key] = value;\n        }\n\n        // compute remaining keys in expression\n        for (var key in expr) {\n          if (_.has(expr, key)) {\n            obj[key] = accumulate(partitions.groups[i], key, expr[key]);\n          }\n        }\n        result.push(obj);\n      });\n\n      return result;\n    },\n\n    /**\n     * Filters the document stream, and only allows matching documents to pass into the next pipeline stage.\n     * $match uses standard MongoDB queries.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array|*}\n     */\n    $match: function (collection, expr) {\n      return (new Mingo.Query(expr)).find(collection).all();\n    },\n\n    /**\n     * Reshapes a document stream.\n     * $project can rename, add, or remove fields as well as create computed values and sub-documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $project: function (collection, expr) {\n\n      if (_.isEmpty(expr)) {\n        return collection;\n      }\n\n      // result collection\n      var projected = [];\n      var objKeys = _.keys(expr);\n      var idOnlyExcludedExpression = false;\n\n      if (_.contains(objKeys, settings.key)) {\n        var id = expr[settings.key];\n        if (id === 0 || id === false) {\n          objKeys = _.without(objKeys, settings.key);\n          if (_.isEmpty(objKeys)) {\n            idOnlyExcludedExpression = true;\n          }\n        }\n      } else {\n        // if not specified the add the ID field\n        objKeys.push(settings.key);\n      }\n\n      for (var i = 0; i < collection.length; i++) {\n\n        var obj = collection[i];\n        var cloneObj = {};\n        var foundSlice = false;\n        var foundExclusion = false;\n        var dropKeys = [];\n\n        if (idOnlyExcludedExpression) {\n          dropKeys.push(settings.key);\n        }\n\n        _.each(objKeys, function (key) {\n\n          var subExpr = expr[key];\n          var newValue;\n          if (key !== settings.key && subExpr === 0) {\n            foundExclusion = true;\n          }\n\n          // tiny optimization here to skip over id\n          if (key === settings.key && _.isEmpty(subExpr)) {\n            newValue = obj[key];\n          } else if (_.isString(subExpr)) {\n            newValue = computeValue(obj, subExpr, key);\n          } else if (subExpr === 1 || subExpr === true) {\n            newValue = getValue(obj, key);\n          } else if (_.isObject(subExpr)) {\n            var operator = _.keys(subExpr);\n            operator = operator.length > 1 ? false : operator[0];\n            if (operator !== false && _.contains(ops(OP_PROJECTION), operator)) {\n              // apply the projection operator on the operator expression for the key\n              var temp = projectionOperators[operator](obj, subExpr[operator], key);\n              if (!_.isUndefined(temp)) {\n                newValue = temp;\n              }\n              if (operator == '$slice') {\n                foundSlice = true;\n              }\n            } else {\n              // compute the value for the sub expression for the key\n              newValue = computeValue(obj, subExpr, key);\n            }\n          } else {\n            dropKeys.push(key);\n          }\n\n          if (!_.isUndefined(newValue)) {\n            cloneObj[key] = newValue;\n          }\n        });\n        // if projection included $slice operator\n        // Also if exclusion fields are found or we want to exclude only the id field\n        // include keys that were not explicitly excluded\n        if (foundSlice || foundExclusion || idOnlyExcludedExpression) {\n          cloneObj = _.defaults(cloneObj, _.omit(obj, dropKeys));\n        }\n        projected.push(cloneObj);\n      }\n\n      return projected;\n    },\n\n    /**\n     * Restricts the number of documents in an aggregation pipeline.\n     *\n     * @param collection\n     * @param value\n     * @returns {Object|*}\n     */\n    $limit: function (collection, value) {\n      return _.first(collection, value);\n    },\n\n    /**\n     * Skips over a specified number of documents from the pipeline and returns the rest.\n     *\n     * @param collection\n     * @param value\n     * @returns {*}\n     */\n    $skip: function (collection, value) {\n      return _.rest(collection, value);\n    },\n\n    /**\n     * Takes an array of documents and returns them as a stream of documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $unwind: function (collection, expr) {\n      var result = [];\n      var field = expr.substr(1);\n      for (var i = 0; i < collection.length; i++) {\n        var obj = collection[i];\n        // must throw an error if value is not an array\n        var value = getValue(obj, field);\n        if (_.isArray(value)) {\n          _.each(value, function (item) {\n            var tmp = _.clone(obj);\n            tmp[field] = item;\n            result.push(tmp);\n          });\n        } else {\n          throw new Error(\"Target field '\" + field + \"' is not of type Array.\");\n        }\n      }\n      return result;\n    },\n\n    /**\n     * Takes all input documents and returns them in a stream of sorted documents.\n     *\n     * @param collection\n     * @param sortKeys\n     * @returns {*}\n     */\n    $sort: function (collection, sortKeys) {\n      if (!_.isEmpty(sortKeys) && _.isObject(sortKeys)) {\n        var modifiers = _.keys(sortKeys);\n        modifiers.reverse().forEach(function (key) {\n          var grouped = groupBy(collection, function (obj) {\n            return resolve(obj, key);\n          });\n          var sortedIndex = {};\n          var findIndex = function (k) { return sortedIndex[hashcode(k)]; }\n\n          var indexKeys = _.sortBy(grouped.keys, function (item, i) {\n            sortedIndex[hashcode(item)] = i;\n            return item;\n          });\n\n          if (sortKeys[key] === -1) {\n            indexKeys.reverse();\n          }\n          collection = [];\n          _.each(indexKeys, function (item) {\n            Array.prototype.push.apply(collection, grouped.groups[findIndex(item)]);\n          });\n        });\n      }\n      return collection;\n    }\n  };\n\n  ////////// QUERY OPERATORS //////////\n  var queryOperators = {};\n\n  var compoundOperators = {\n\n    /**\n     * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $and: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $and criteria\");\n      }\n      var queries = [];\n      _.each(value, function (expr) {\n        queries.push(new Mingo.Query(expr));\n      });\n\n      return {\n        test: function (obj) {\n          for (var i = 0; i < queries.length; i++) {\n            if (!queries[i].test(obj)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      };\n    },\n\n    /**\n     * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $or: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $or criteria\");\n      }\n      var queries = [];\n      _.each(value, function (expr) {\n        queries.push(new Mingo.Query(expr));\n      });\n\n      return {\n        test: function (obj) {\n          for (var i = 0; i < queries.length; i++) {\n            if (queries[i].test(obj)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    },\n\n    /**\n     * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $nor: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $nor criteria\");\n      }\n      var query = this.$or(\"$or\", value);\n      return {\n        test: function (obj) {\n          return !query.test(obj);\n        }\n      };\n    },\n\n    /**\n     * Inverts the effect of a query expression and returns documents that do not match the query expression.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $not: function (selector, value) {\n      var criteria = {};\n      criteria[selector] = normalize(value);\n      var query = new Mingo.Query(criteria);\n      return {\n        test: function (obj) {\n          return !query.test(obj);\n        }\n      };\n    },\n\n    /**\n     * Matches documents that satisfy a JavaScript expression.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: test}}\n     */\n    $where: function (selector, value) {\n      if (!_.isFunction(value)) {\n        value = new Function(\"return \" + value + \";\");\n      }\n      return {\n        test: function (obj) {\n          return value.call(obj) === true;\n        }\n      };\n    }\n\n  };\n\n  // add compound query operators\n  _.extend(queryOperators, compoundOperators);\n\n  var simpleOperators = {\n\n    /**\n     * Checks that two values are equal. Pseudo operator introduced for convenience and consistency\n     *\n     * @param a\n     * @param b\n     * @returns {*}\n     */\n    $eq: function (a, b) {\n      // flatten to reach nested values. fix for https://github.com/kofrasa/mingo/issues/19\n      a = _.flatten([a]);\n      a = _.find(a, function (val) {\n        return _.isEqual(val, b);\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches all values that are not equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $ne: function (a, b) {\n      return !this.$eq(a, b);\n    },\n\n    /**\n     * Matches any of the values that exist in an array specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {*}\n     */\n    $in: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      return _.intersection(a, b).length > 0;\n    },\n\n    /**\n     * Matches values that do not exist in an array specified to the query.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $nin: function (a, b) {\n      return _.isUndefined(a) || !this.$in(a, b);\n    },\n\n    /**\n     * Matches values that are less than the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $lt: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val < b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are less than or equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $lte: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val <= b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are greater than the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $gt: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val > b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are greater than or equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $gte: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val >= b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Performs a modulo operation on the value of a field and selects documents with a specified result.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean|boolean}\n     */\n    $mod: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return _.isNumber(val) && _.isArray(b) && b.length === 2 && (val % b[0]) === b[1];\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Selects documents where values match a specified regular expression.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $regex: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return _.isString(val) && _.isRegExp(b) && (!!val.match(b));\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches documents that have the specified field.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean|*|boolean}\n     */\n    $exists: function (a, b) {\n      return (b === false && _.isUndefined(a)) || (b === true && !_.isUndefined(a));\n    },\n\n    /**\n     * Matches arrays that contain all elements specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns boolean\n     */\n    $all: function (a, b) {\n      var self = this;\n      var matched = false;\n      if (_.isArray(a) && _.isArray(b)) {\n        for (var i = 0; i < b.length; i++) {\n          if (_.isObject(b[i]) && _.contains(_.keys(b[i]), \"$elemMatch\")) {\n            matched = matched || self.$elemMatch(a, b[i].$elemMatch);\n          } else {\n            // order of arguments matter. underscore maintains order after intersection\n            return _.intersection(b, a).length === b.length;\n          }\n        }\n      }\n      return matched;\n    },\n\n    /**\n     * Selects documents if the array field is a specified size.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $size: function (a, b) {\n      return _.isArray(a) && _.isNumber(b) && (a.length === b);\n    },\n\n    /**\n     * Selects documents if element in the array field matches all the specified $elemMatch condition.\n     *\n     * @param a\n     * @param b\n     */\n    $elemMatch: function (a, b) {\n      if (_.isArray(a) && !_.isEmpty(a)) {\n        var query = new Mingo.Query(b);\n        for (var i = 0; i < a.length; i++) {\n          if (query.test(a[i])) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Selects documents if a field is of the specified type.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $type: function (a, b) {\n      switch (b) {\n        case 1:\n          return _.isNumeric(a) && (a + \"\").indexOf(\".\") !== -1;\n        case 2:\n        case 5:\n          return _.isString(a);\n        case 3:\n          return _.isObject(a);\n        case 4:\n          return _.isArray(a);\n        case 8:\n          return _.isBoolean(a);\n        case 9:\n          return _.isDate(a);\n        case 10:\n          return _.isNull(a);\n        case 11:\n          return _.isRegExp(a);\n        case 16:\n          return _.isNumeric(a) && a <= 2147483647 && (a + \"\").indexOf(\".\") === -1;\n        case 18:\n          return _.isNumeric(a) && a > 2147483647 && a <= 9223372036854775807 && (a + \"\").indexOf(\".\") === -1;\n        default:\n          return false;\n      }\n    }\n  };\n  // add simple query operators\n  _.each(_.keys(simpleOperators), function (op) {\n    queryOperators[op] = (function (f, ctx) {\n      return function (selector, value) {\n        return {\n          test: function (obj) {\n            // value of field must be fully resolved.\n            var lhs = resolve(obj, selector);\n            return f.call(ctx, lhs, value);\n          }\n        };\n      }\n    }(simpleOperators[op], simpleOperators));\n  });\n\n  var projectionOperators = {\n\n    /**\n     * Projects the first element in an array that matches the query condition.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     */\n    $: function (obj, expr, field) {\n      throw new Error(\"$ not implemented\");\n    },\n\n    /**\n     * Projects only the first element from an array that matches the specified $elemMatch condition.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     * @returns {*}\n     */\n    $elemMatch: function (obj, expr, field) {\n      var array = resolve(obj, field);\n      var query = new Mingo.Query(expr);\n\n      if (_.isUndefined(array) || !_.isArray(array)) {\n        return undefined;\n      }\n\n      for (var i = 0; i < array.length; i++) {\n        if (query.test(array[i])) {\n          return [array[i]];\n        }\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Limits the number of elements projected from an array. Supports skip and limit slices.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     */\n    $slice: function (obj, expr, field) {\n      var array = resolve(obj, field);\n\n      if (!_.isArray(array)) {\n        return array;\n      }\n      if (!_.isArray(expr)) {\n        if (!_.isNumber(expr)) {\n          throw new Error(\"Invalid type for $slice operator\");\n        }\n        expr = expr < 0 ? [expr] : [0, expr];\n      } else {\n        // MongoDB $slice works a bit differently from Array.slice\n        // Uses single argument for 'limit' and array argument [skip, limit]\n        var skip = (expr[0] < 0) ? array.length + expr[0] : expr;\n        var limit = skip + expr[1];\n        expr = [skip, limit];\n      }\n\n      return Array.prototype.slice.apply(array, expr);\n    }\n  };\n\n  var groupOperators = {\n\n    /**\n     * Returns an array of all the unique values for the selected field among for each document in that group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $addToSet: function (collection, expr) {\n      var result = _.map(collection, function (obj) {\n        return computeValue(obj, expr, null);\n      });\n      return _.uniq(result);\n    },\n\n    /**\n     * Returns the sum of all the values in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $sum: function (collection, expr) {\n      if (!_.isArray(collection)) {\n        return 0;\n      }\n      if (_.isNumber(expr)) {\n        // take a short cut if expr is number literal\n        return collection.length * expr;\n      }\n      return _.reduce(collection, function (acc, obj) {\n        // pass empty field to avoid naming conflicts with fields on documents\n        var n = computeValue(obj, expr, null);\n        return _.isNumber(n)? acc + n : acc;\n      }, 0);\n    },\n\n    /**\n     * Returns the highest value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $max: function (collection, expr) {\n      var obj = _.max(collection, function (obj) {\n          return computeValue(obj, expr, null);\n      });\n      return computeValue(obj, expr, null);\n    },\n\n    /**\n     * Returns the lowest value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $min: function (collection, expr) {\n      var obj = _.min(collection, function (obj) {\n        return computeValue(obj, expr, null);\n      });\n      return computeValue(obj, expr, null);\n    },\n\n    /**\n     * Returns an average of all the values in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {number}\n     */\n    $avg: function (collection, expr) {\n      return this.$sum(collection, expr) / (collection.length || 1);\n    },\n\n    /**\n     * Returns an array of all values for the selected field among for each document in that group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array|*}\n     */\n    $push: function (collection, expr) {\n      return _.map(collection, function (obj) {\n        return computeValue(obj, expr, null);\n      });\n    },\n\n    /**\n     * Returns the first value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $first: function (collection, expr) {\n      return (collection.length > 0) ? computeValue(collection[0], expr) : undefined;\n    },\n\n    /**\n     * Returns the last value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $last: function (collection, expr) {\n      return (collection.length > 0) ? computeValue(collection[collection.length - 1], expr) : undefined;\n    }\n  };\n\n\n  /////////// Aggregation Operators ///////////\n\n  var arithmeticOperators = {\n\n    /**\n     * Computes the sum of an array of numbers.\n     *\n     * @param obj\n     * @param expr\n     * @returns {Object}\n     */\n    $add: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.reduce(args, function (memo, num) {\n        return memo + num;\n      }, 0);\n    },\n\n    /**\n     * Takes an array that contains two numbers or two dates and subtracts the second value from the first.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $subtract: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return args[0] - args[1];\n    },\n\n    /**\n     * Takes two numbers and divides the first number by the second.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $divide: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return args[0] / args[1];\n    },\n\n    /**\n     * Computes the product of an array of numbers.\n     *\n     * @param obj\n     * @param expr\n     * @returns {Object}\n     */\n    $multiply: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.reduce(args, function (memo, num) {\n        return memo * num;\n      }, 1);\n    },\n\n    /**\n     * Takes two numbers and calculates the modulo of the first number divided by the second.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $mod: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return args[0] % args[1];\n    }\n  };\n\n  var stringOperators = {\n\n    /**\n     * Concatenates two strings.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string|*}\n     */\n    $concat: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      // does not allow concatenation with nulls\n      if (_.contains(args, null) || _.contains(args, undefined)) {\n        return null;\n      }\n      return args.join(\"\");\n    },\n\n    /**\n     * Compares two strings and returns an integer that reflects the comparison.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $strcasecmp: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      args[0] = _.isEmpty(args[0]) ? \"\" : args[0].toUpperCase();\n      args[1] = _.isEmpty(args[1]) ? \"\" : args[1].toUpperCase();\n      if (args[0] > args[1]) {\n        return 1;\n      }\n      return (args[0] < args[1]) ? -1 : 0;\n    },\n\n    /**\n     * Returns a substring of a string, starting at a specified index position and including the specified number of characters.\n     * The index is zero-based.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $substr: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      if (_.isString(args[0])) {\n        if (args[1] < 0) {\n          return \"\";\n        } else if (args[2] < 0) {\n          return args[0].substr(args[1]);\n        } else {\n          return args[0].substr(args[1], args[2]);\n        }\n      }\n      return \"\";\n    },\n\n    /**\n     * Converts a string to lowercase.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $toLower: function (obj, expr) {\n      var value = computeValue(obj, expr, null);\n      return _.isEmpty(value) ? \"\" : value.toLowerCase();\n    },\n\n    /**\n     * Converts a string to uppercase.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $toUpper: function (obj, expr) {\n      var value = computeValue(obj, expr, null);\n      return _.isEmpty(value) ? \"\" : value.toUpperCase();\n    }\n  };\n\n  var dateOperators = {\n    /**\n     * Returns the day of the year for a date as a number between 1 and 366 (leap year).\n     * @param obj\n     * @param expr\n     */\n    $dayOfYear: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      if (_.isDate(d)) {\n        var start = new Date(d.getFullYear(), 0, 0);\n        var diff = d - start;\n        var oneDay = 1000 * 60 * 60 * 24;\n        return Math.round(diff / oneDay);\n      }\n      return undefined;\n    },\n\n    /**\n     * Returns the day of the month for a date as a number between 1 and 31.\n     * @param obj\n     * @param expr\n     */\n    $dayOfMonth: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getDate() : undefined;\n    },\n\n    /**\n     * Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).\n     * @param obj\n     * @param expr\n     */\n    $dayOfWeek: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getDay() + 1 : undefined;\n    },\n\n    /**\n     * Returns the year for a date as a number (e.g. 2014).\n     * @param obj\n     * @param expr\n     */\n    $year: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getFullYear() : undefined;\n    },\n\n    /**\n     * Returns the month for a date as a number between 1 (January) and 12 (December).\n     * @param obj\n     * @param expr\n     */\n    $month: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getMonth() + 1 : undefined;\n    },\n\n    /**\n     * Returns the week number for a date as a number between 0\n     * (the partial week that precedes the first Sunday of the year) and 53 (leap year).\n     * @param obj\n     * @param expr\n     */\n    $week: function (obj, expr) {\n      // source: http://stackoverflow.com/a/6117889/1370481\n      var d = computeValue(obj, expr, null);\n\n      // Copy date so don't modify original\n      d = new Date(+d);\n      d.setHours(0, 0, 0);\n      // Set to nearest Thursday: current date + 4 - current day number\n      // Make Sunday's day number 7\n      d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n      // Get first day of year\n      var yearStart = new Date(d.getFullYear(), 0, 1);\n      // Calculate full weeks to nearest Thursday\n      return Math.floor(( ( (d - yearStart) / 8.64e7) + 1) / 7);\n    },\n\n    /**\n     * Returns the hour for a date as a number between 0 and 23.\n     * @param obj\n     * @param expr\n     */\n    $hour: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getHours() : undefined;\n    },\n\n    /**\n     * Returns the minute for a date as a number between 0 and 59.\n     * @param obj\n     * @param expr\n     */\n    $minute: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getMinutes() : undefined;\n    },\n\n    /**\n     * Returns the seconds for a date as a number between 0 and 60 (leap seconds).\n     * @param obj\n     * @param expr\n     */\n    $second: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getSeconds() : undefined;\n    },\n\n    /**\n     * Returns the milliseconds of a date as a number between 0 and 999.\n     * @param obj\n     * @param expr\n     */\n    $millisecond: function (obj, expr) {\n      var d = computeValue(obj, expr, null);\n      return _.isDate(d) ? d.getMilliseconds() : undefined;\n    },\n\n    /**\n     * Returns the date as a formatted string.\n     *\n     * %Y  Year (4 digits, zero padded)  0000-9999\n     * %m  Month (2 digits, zero padded)  01-12\n     * %d  Day of Month (2 digits, zero padded)  01-31\n     * %H  Hour (2 digits, zero padded, 24-hour clock)  00-23\n     * %M  Minute (2 digits, zero padded)  00-59\n     * %S  Second (2 digits, zero padded)  00-60\n     * %L  Millisecond (3 digits, zero padded)  000-999\n     * %j  Day of year (3 digits, zero padded)  001-366\n     * %w  Day of week (1-Sunday, 7-Saturday)  1-7\n     * %U  Week of year (2 digits, zero padded)  00-53\n     * %%  Percent Character as a Literal  %\n     *\n     * @param obj current object\n     * @param expr operator expression\n     */\n    $dateToString: function (obj, expr) {\n\n      var fmt = expr['format'];\n      var date = computeValue(obj, expr['date'], null);\n      var matches = fmt.match(/(%%|%Y|%m|%d|%H|%M|%S|%L|%j|%w|%U)/g);\n\n      for (var i = 0, len = matches.length; i < len; i++) {\n        var hdlr = DATE_SYM_TABLE[matches[i]];\n        var value = hdlr;\n\n        if (_.isArray(hdlr)) {\n          // reuse date operators\n          var fn = this[hdlr[0]];\n          var pad = hdlr[1];\n          value = padDigits(fn.call(this, obj, date), pad);\n        }\n        // replace the match with resolved value\n        fmt = fmt.replace(matches[i], value);\n      }\n\n      return fmt;\n    }\n  };\n\n  var setOperators = {\n    /**\n     * Returns true if two sets have the same elements.\n     * @param obj\n     * @param expr\n     */\n    $setEquals: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      var first = _.uniq(args[0]);\n      var second = _.uniq(args[1]);\n      if (first.length !== second.length) {\n        return false;\n      }\n      return _.difference(first, second).length == 0;\n    },\n\n    /**\n     * Returns the common elements of the input sets.\n     * @param obj\n     * @param expr\n     */\n    $setIntersection: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.intersection(args[0], args[1]);\n    },\n\n    /**\n     * Returns elements of a set that do not appear in a second set.\n     * @param obj\n     * @param expr\n     */\n    $setDifference: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.difference(args[0], args[1]);\n    },\n\n    /**\n     * Returns a set that holds all elements of the input sets.\n     * @param obj\n     * @param expr\n     */\n    $setUnion: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.union(args[0], args[1]);\n    },\n\n    /**\n     * Returns true if all elements of a set appear in a second set.\n     * @param obj\n     * @param expr\n     */\n    $setIsSubset: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return _.intersection(args[0], args[1]).length === args[0].length;\n    },\n\n    /**\n     * Returns true if any elements of a set evaluate to true, and false otherwise.\n     * @param obj\n     * @param expr\n     */\n    $anyElementTrue: function (obj, expr) {\n      // mongodb nests the array expression in another\n      var args = computeValue(obj, expr, null)[0];\n      for (var i = 0; i < args.length; i++) {\n        if (!!args[i])\n          return true;\n      }\n      return false;\n    },\n\n    /**\n     * Returns true if all elements of a set evaluate to true, and false otherwise.\n     * @param obj\n     * @param expr\n     */\n    $allElementsTrue: function (obj, expr) {\n      // mongodb nests the array expression in another\n      var args = computeValue(obj, expr, null)[0];\n      for (var i = 0; i < args.length; i++) {\n        if (!args[i])\n          return false;\n      }\n      return true;\n    }\n  };\n\n  var conditionalOperators = {\n\n    /**\n     * A ternary operator that evaluates one expression,\n     * and depending on the result returns the value of one following expressions.\n     *\n     * @param obj\n     * @param expr\n     */\n    $cond: function (obj, expr) {\n      var ifExpr, thenExpr, elseExpr;\n      if (_.isArray(expr)) {\n        if (expr.length != 3) {\n          throw new Error(\"Invalid arguments for $cond operator\");\n        }\n        ifExpr = expr[0];\n        thenExpr = expr[1];\n        elseExpr = expr[2];\n      } else if (_.isObject(expr)) {\n        ifExpr = expr['if'];\n        thenExpr = expr['then'];\n        elseExpr = expr['else'];\n      }\n      var condition = computeValue(obj, ifExpr, null);\n      return condition ? computeValue(obj, thenExpr, null) : computeValue(obj, elseExpr, null);\n    },\n\n    /**\n     * Evaluates an expression and returns the first expression if it evaluates to a non-null value.\n     * Otherwise, $ifNull returns the second expression's value.\n     *\n     * @param obj\n     * @param expr\n     * @returns {*}\n     */\n    $ifNull: function (obj, expr) {\n      if (!_.isArray(expr) || expr.length != 2) {\n        throw new Error(\"Invalid arguments for $ifNull operator\");\n      }\n      var args = computeValue(obj, expr, null);\n      return (args[0] === null || args[0] === undefined) ? args[1] : args[0];\n    }\n  };\n\n  var comparisonOperators = {\n    /**\n     * Compares two values and returns the result of the comparison as an integer.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $cmp: function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      if (args[0] > args[1]) {\n        return 1;\n      }\n      return (args[0] < args[1]) ? -1 : 0;\n    }\n  };\n  // mixin comparison operators\n  _.each([\"$eq\", \"$ne\", \"$gt\", \"$gte\", \"$lt\", \"$lte\"], function (op) {\n    comparisonOperators[op] = function (obj, expr) {\n      var args = computeValue(obj, expr, null);\n      return simpleOperators[op](args[0], args[1]);\n    };\n  });\n\n  var arrayOperators = {\n    /**\n     * Counts and returns the total the number of items in an array.\n     * @param obj\n     * @param expr\n     */\n    $size: function (obj, expr) {\n      var value = computeValue(obj, expr, null);\n      return _.isArray(value) ? value.length : undefined;\n    }\n  };\n\n  var literalOperators = {\n    /**\n     * Return a value without parsing.\n     * @param obj\n     * @param expr\n     */\n    $literal: function (obj, expr) {\n      return expr;\n    }\n  };\n\n\n  var variableOperators = {\n    /**\n     * Applies a subexpression to each element of an array and returns the array of resulting values in order.\n     * @param obj\n     * @param expr\n     * @returns {Array|*}\n     */\n    $map: function (obj, expr) {\n      var inputExpr = computeValue(obj, expr[\"input\"], null);\n      if (!_.isArray(inputExpr)) {\n        throw new Error(\"Input expression for $map must resolve to an array\");\n      }\n      var asExpr = expr[\"as\"];\n      var inExpr = expr[\"in\"];\n\n      // HACK: add the \"as\" expression as a value on the object to take advantage of \"resolve()\"\n      // which will reduce to that value when invoked. The reference to the as expression will be prefixed with \"$$\".\n      // But since a \"$\" is stripped of before passing the name to \"resolve()\" we just need to prepend \"$\" to the key.\n      var tempKey = \"$\" + asExpr;\n      // let's save any value that existed, kinda useless but YOU CAN NEVER BE TOO SURE, CAN YOU :)\n      var original = obj[tempKey];\n      return _.map(inputExpr, function (item) {\n        obj[tempKey] = item;\n        var value = computeValue(obj, inExpr, null);\n        // cleanup and restore\n        if (_.isUndefined(original)) {\n          delete obj[tempKey];\n        } else {\n          obj[tempKey] = original;\n        }\n        return value;\n      });\n\n    },\n\n    /**\n     * Defines variables for use within the scope of a subexpression and returns the result of the subexpression.\n     * @param obj\n     * @param expr\n     * @returns {*}\n     */\n    $let: function (obj, expr) {\n      var varsExpr = expr[\"vars\"];\n      var inExpr = expr[\"in\"];\n\n      // resolve vars\n      var originals = {};\n      var varsKeys = _.keys(varsExpr);\n      _.each(varsKeys, function (key) {\n        var val = computeValue(obj, varsExpr[key], null);\n        var tempKey = \"$\" + key;\n        // set value on object using same technique as in \"$map\"\n        originals[tempKey] = obj[tempKey];\n        obj[tempKey] = val;\n      });\n\n      var value = computeValue(obj, inExpr, null);\n\n      // cleanup and restore\n      _.each(varsKeys, function (key) {\n        var tempKey = \"$\" + key;\n        if (_.isUndefined(originals[tempKey])) {\n          delete obj[tempKey];\n        } else {\n          obj[tempKey] = originals[tempKey];\n        }\n      });\n\n      return value;\n    }\n  };\n\n  var booleanOperators = {\n    /**\n     * Returns true only when all its expressions evaluate to true. Accepts any number of argument expressions.\n     * @param obj\n     * @param expr\n     * @returns {boolean}\n     */\n    $and: function (obj, expr) {\n      var value = computeValue(obj, expr, null);\n      return _.every(value);\n    },\n\n    /**\n     * Returns true when any of its expressions evaluates to true. Accepts any number of argument expressions.\n     * @param obj\n     * @param expr\n     * @returns {boolean}\n     */\n    $or: function (obj, expr) {\n      var value = computeValue(obj, expr, null);\n      return _.some(value);\n    },\n\n    /**\n     * Returns the boolean value that is the opposite of its argument expression. Accepts a single argument expression.\n     * @param obj\n     * @param expr\n     * @returns {boolean}\n     */\n    $not: function (obj, expr) {\n      return !computeValue(obj, expr[0], null);\n    }\n  };\n\n  // combine aggregate operators\n  var aggregateOperators = _.extend(\n    {},\n    arrayOperators,\n    arithmeticOperators,\n    booleanOperators,\n    comparisonOperators,\n    conditionalOperators,\n    dateOperators,\n    literalOperators,\n    setOperators,\n    stringOperators,\n    variableOperators\n  );\n\n  var OP_QUERY = Mingo.OP_QUERY = 'query',\n    OP_GROUP = Mingo.OP_GROUP = 'group',\n    OP_AGGREGATE = Mingo.OP_AGGREGATE = 'aggregate',\n    OP_PIPELINE = Mingo.OP_PIPELINE = 'pipeline',\n    OP_PROJECTION = Mingo.OP_PROJECTION = 'projection';\n\n  // operator definitions\n  var OPERATORS = {\n    'aggregate': aggregateOperators,\n    'group': groupOperators,\n    'pipeline': pipelineOperators,\n    'projection': projectionOperators,\n    'query': queryOperators\n  };\n\n  // used for formatting dates in $dateToString operator\n  var DATE_SYM_TABLE = {\n    '%Y': ['$year', 4],\n    '%m': ['$month', 2],\n    '%d': ['$dayOfMonth', 2],\n    '%H': ['$hour', 2],\n    '%M': ['$minute', 2],\n    '%S': ['$second', 2],\n    '%L': ['$millisecond', 3],\n    '%j': ['$dayOfYear', 3],\n    '%w': ['$dayOfWeek', 1],\n    '%U': ['$week', 2],\n    '%%': '%'\n  };\n\n  function padDigits(number, digits) {\n    return new Array(Math.max(digits - String(number).length + 1, 0)).join('0') + number;\n  }\n\n  /**\n   * Return the registered operators on the given operator category\n   * @param type catgory of operators\n   * @returns {*}\n   */\n  function ops(type) {\n    return _.keys(OPERATORS[type]);\n  }\n\n  /**\n   * Groups the collection into sets by the returned key\n   *\n   * @param collection\n   * @param fn {function} to compute the group key of an item in the collection\n   */\n  function groupBy(collection, fn) {\n\n    var result = {\n      'keys': [],\n      'groups': []\n    };\n\n    var lookup = {};\n\n    _.each(collection, function (obj) {\n\n      var key = fn(obj);\n      var h = hashcode(key);\n      var index = -1;\n\n      if (_.isUndefined(lookup[h])) {\n        index = result.keys.length;\n        lookup[h] = index;\n        result.keys.push(key);\n        result.groups.push([]);\n      }\n      index = lookup[h];\n      result.groups[index].push(obj);\n    });\n\n    // assert this\n    if (result.keys.length !== result.groups.length) {\n      throw new Error(\"assert groupBy(): keys.length !== groups.length\");\n    }\n\n    return result;\n  }\n\n  // encode value to a unique string form that is easily reversable\n  function encode(value) {\n    if (_.isNull(value)) {\n      return \"null\";\n    } else if (_.isUndefined(value)) {\n      return \"undef\";\n    } else {\n      var type = value.constructor.name;\n      switch (type) {\n        case \"Boolean\":\n          return \"b|\" + value.toString();\n        case \"String\":\n          return \"s|\" + value.toString();\n        case \"RegExp\":\n          return \"r|\" + value.toString();\n        case \"Number\":\n          return \"n|\" + value.toString();\n        case \"Date\":\n          return \"d|\" + value.toISOString();\n        case \"Array\":\n          return \"a|\" + JSON.stringify(_.map(value, function (v) { return encode(v); }));\n        case \"Object\":\n          return \"o|\" + JSON.stringify(_.mapObject(value, function (v) { return encode(v); }));\n        default:\n          return type + \"|\" + JSON.stringify(_.mapObject(value, function (v) { return encode(v); }));\n      }\n    }\n  }\n\n  // http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n  // http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  function hashcode(value) {\n    var hash = 0, i, chr, len, s = encode(value);\n    if (s.length === 0) return hash;\n    for (i = 0, len = s.length; i < len; i++) {\n      chr   = s.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash.toString();\n  }\n\n  /**\n   * Returns the result of evaluating a $group operation over a collection\n   *\n   * @param collection\n   * @param field the name of the aggregate operator or field\n   * @param expr the expression of the aggregate operator for the field\n   * @returns {*}\n   */\n  function accumulate(collection, field, expr) {\n    if (_.contains(ops(OP_GROUP), field)) {\n      return groupOperators[field](collection, expr);\n    }\n\n    if (_.isObject(expr)) {\n      var result = {};\n      for (var key in expr) {\n        if (_.has(expr, key)) {\n          result[key] = accumulate(collection, key, expr[key]);\n          // must run ONLY one group operator per expression\n          // if so, return result of the computed value\n          if (_.contains(ops(OP_GROUP), key)) {\n            result = result[key];\n            // if there are more keys in expression this is bad\n            if (_.keys(expr).length > 1) {\n              throw new Error(\"Invalid $group expression '\" + JSON.stringify(expr) + \"'\");\n            }\n            break;\n          }\n        }\n      }\n      return result;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Computes the actual value of the expression using the given object as context\n   *\n   * @param obj the current object from the collection\n   * @param expr the expression for the given field\n   * @param field the field name (may also be an aggregate operator)\n   * @returns {*}\n   */\n  function computeValue(obj, expr, field) {\n\n    // if the field of the object is a valid operator\n    if (_.contains(ops(OP_AGGREGATE), field)) {\n      return aggregateOperators[field](obj, expr);\n    }\n\n    // if expr is a variable for an object field\n    // field not used in this case\n    if (_.isString(expr) && expr.length > 0 && expr[0] === \"$\") {\n      return resolve(obj, expr.slice(1));\n    }\n\n    var result;\n\n    // check and return value if already in a resolved state\n    if (isSimpleType(expr)) {\n      return expr;\n    } else if (_.isArray(expr)) {\n      result = _.map(expr, function (item) {\n        return computeValue(obj, item, null);\n      });\n    } else if (_.isObject(expr)) {\n      result = {};\n      for (var key in expr) {\n        if (_.has(expr, key)) {\n          result[key] = computeValue(obj, expr[key], key);\n\n          // must run ONLY one aggregate operator per expression\n          // if so, return result of the computed value\n          if (_.contains(ops(OP_AGGREGATE), key)) {\n            result = result[key];\n            // if there are more keys in expression this is bad\n            if (_.keys(expr).length > 1) {\n              throw new Error(\"Invalid aggregation expression '\" + JSON.stringify(expr) + \"'\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n}(this));\n"]}