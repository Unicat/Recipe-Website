{"version":3,"sources":["../../../../node_modules/from/test/index.js"],"names":["from","require","spec","a","read","stream","callback","actual","on","data","push","once","err","pause","Math","random","process","nextTick","resume","exports","test","fs","i","emit","readable","validateOnExit","arr","equal","length","done","l","expected","t","slice","pausable","strict","error","deepEqual","_expected","n","self","setTimeout","shift","paused","setInterval","clearInterval"],"mappings":"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","file":"index.js","sourcesContent":["var from = require('..')\nvar spec = require('stream-spec')\nvar a = require('assertions')\n\nfunction read(stream, callback) {\n  var actual = []\n  stream.on('data', function (data) {\n    actual.push(data)\n  })\n  stream.once('end', function () {\n    callback(null, actual)\n  })\n  stream.once('error', function (err) {\n    callback(err)\n  })\n}\n\nfunction pause(stream) {\n  stream.on('data', function () {\n    if(Math.random() > 0.1) return\n    stream.pause()\n    process.nextTick(function () {\n      stream.resume()\n    })\n  })\n}\n\nexports['inc'] = function (test) {\n\n  var fs = from(function (i) {\n    this.emit('data', i)\n    if(i >= 99)\n      return this.emit('end')\n    return true\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100)\n    test.done()\n  })\n}\n\nexports['simple'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple pausable'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  pause(t)\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple (not strictly pausable) setTimeout'] = function (test) {\n\n  var l = 10\n    , expected = [] \n  while(l--) expected.push(l * Math.random())\n\n\n  var _expected = expected.slice()\n  var t = from(function (i, n) {\n    var self = this\n    setTimeout(function () {\n      if(_expected.length)\n        self.emit('data', _expected.shift())\n      else\n        self.emit('end') \n      n()\n    }, 3)\n  })\n\n  /*\n    using from in this way will not be strictly pausable.\n    it could be extended to buffer outputs, but I think a better\n    way would be to use a PauseStream that implements strict pause.\n  */\n\n  spec(t)\n    .readable()\n    .pausable({strict: false })\n    .validateOnExit()\n\n  //pause(t)\n  var paused = false\n  var i = setInterval(function () {\n    if(!paused) t.pause()\n    else t.resume()\n    paused = !paused\n  }, 2)\n\n  t.on('end', function () {\n    clearInterval(i)\n  })\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\n\n"]}